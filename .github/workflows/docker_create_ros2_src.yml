name: Create Robast Base Images

# Trigger workflow on push to main branch and on workflow dispatch
on:
  push:
    branches:
      - main
    paths:
      - src/Dockerfile
      - src/Hardware/**
      - src/robot_backend/**
      - src/ros2/communication_interfaces/**
      - src/ros2/error_handling/**
  workflow_dispatch:

env:
  Ros-Distro: humble
  Registry: ghcr.io
  Repo: robast-gmbh/monorepo
  Project-Name: robast-dev-base
  Project-Name-Core: robast-dev-core
  Project-Name-Source: robast-source

jobs:
  build-dev-base-arm64:
    runs-on: self-hosted
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
    
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.Registry }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Docker Buildx
        uses: docker/setup-buildx-action@v3 

      - name: Build and push ${{ env.Project-Name }} for arm64
        uses: docker/build-push-action@v6
        with:
          context: src/
          platforms: linux/arm64/v8
          push: true
          file: src/Dockerfile
          target: ${{ env.Project-Name }}
          tags: |
            ${{ env.Registry }}/${{ env.Repo }}/${{ env.Project-Name }}:${{ env.Ros-Distro }}-arm64
          cache-from: type=gha
          cache-to: type=gha

  build-dev-base-amd64:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
    
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.Registry }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Docker Buildx
        uses: docker/setup-buildx-action@v3 

      - name: Build and push ${{ env.Project-Name }} for amd64
        uses: docker/build-push-action@v6
        with:
          context: src/
          platforms: linux/amd64
          push: true
          file: src/Dockerfile
          target: ${{ env.Project-Name }}
          tags: |
            ${{ env.Registry }}/${{ env.Repo }}/${{ env.Project-Name }}:${{ env.Ros-Distro }}-amd64
          cache-from: type=gha
          cache-to: type=gha

  build-dev-core-arm64:
    runs-on: self-hosted
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
    
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.Registry }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Docker Buildx
        uses: docker/setup-buildx-action@v3 

      - name: Build and push ${{ env.Project-Name-Core }} for arm64
        uses: docker/build-push-action@v6
        with:
          context: src/
          platforms: linux/arm64/v8
          push: true
          file: src/Dockerfile
          target: ${{ env.Project-Name-Core }}
          tags: |
            ${{ env.Registry }}/${{ env.Repo }}/${{ env.Project-Name-Core }}:${{ env.Ros-Distro }}-arm64
          cache-from: type=gha
          cache-to: type=gha

  build-dev-core-amd64:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
    
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.Registry }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Docker Buildx
        uses: docker/setup-buildx-action@v3 

      - name: Build and push ${{ env.Project-Name-Core }} for amd64
        uses: docker/build-push-action@v6
        with:
          context: src/
          platforms: linux/amd64
          push: true
          file: src/Dockerfile
          target: ${{ env.Project-Name-Core }}
          tags: |
            ${{ env.Registry }}/${{ env.Repo }}/${{ env.Project-Name-Core }}:${{ env.Ros-Distro }}-amd64
          cache-from: type=gha
          cache-to: type=gha

  build-source-arm64:
    runs-on: self-hosted
    needs: build-dev-base-arm64
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
    
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.Registry }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Docker Buildx
        uses: docker/setup-buildx-action@v3 

      - name: Build and push ${{ env.Project-Name-Source }} for arm64
        uses: docker/build-push-action@v6
        with:
          context: src/
          platforms: linux/arm64/v8
          push: true
          file: src/Dockerfile
          target: ${{ env.Project-Name-Source }}
          tags: |
            ${{ env.Registry }}/${{ env.Repo }}/${{ env.Project-Name-Source }}:${{ env.Ros-Distro }}-arm64
          cache-from: type=gha
          cache-to: type=gha

  build-source-amd64:
    runs-on: ubuntu-latest
    needs: build-dev-base-amd64
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
    
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.Registry }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Docker Buildx
        uses: docker/setup-buildx-action@v3 

      - name: Build and push ${{ env.Project-Name-Source }} for amd64
        uses: docker/build-push-action@v6
        with:
          context: src/
          platforms: linux/amd64
          push: true
          file: src/Dockerfile
          target: ${{ env.Project-Name-Source }}
          tags: |
            ${{ env.Registry }}/${{ env.Repo }}/${{ env.Project-Name-Source }}:${{ env.Ros-Distro }}-amd64
          cache-from: type=gha
          cache-to: type=gha

  set_output_from_env:
    runs-on: ubuntu-latest
    outputs:
      registry: ${{ steps.set-registry.outputs.registry }}
      repo: ${{ steps.set-repo.outputs.repo }}
      project-name: ${{ steps.set-project-name.outputs.project-name }}
      project-name-core: ${{ steps.set-project-name-core.outputs.project-name-core }}
      project-name-source: ${{ steps.set-project-name-source.outputs.project-name-source }}
      ros-distro: ${{ steps.set-ros-distro.outputs.ros-distro }}
    steps:
      - id: set-registry
        run: echo "registry=${{ env.Registry }}" >> "$GITHUB_OUTPUT"
      - id: set-repo
        run: echo "repo=${{ env.Repo }}" >> "$GITHUB_OUTPUT"
      - id: set-project-name
        run: echo "project-name=${{ env.Project-Name }}" >> "$GITHUB_OUTPUT"
      - id: set-project-name-core
        run: echo "project-name-core=${{ env.Project-Name-Core }}" >> "$GITHUB_OUTPUT"
      - id: set-project-name-source
        run: echo "project-name-source=${{ env.Project-Name-Source }}" >> "$GITHUB_OUTPUT"
      - id: set-ros-distro
        run: echo "ros-distro=${{ env.Ros-Distro }}" >> "$GITHUB_OUTPUT"

  create-multi-platform-manifest-dev-base:
    needs: [build-dev-base-arm64, build-dev-base-amd64, set_output_from_env]
    uses: ./.github/workflows/create_multi_platform_manifest.yml
    with:
      registry: ${{ needs.set_output_from_env.outputs.registry }}
      repo: ${{ needs.set_output_from_env.outputs.repo }}
      project-name: ${{ needs.set_output_from_env.outputs.project-name }}
      tag: ${{ needs.set_output_from_env.outputs.ros-distro }}

  create-multi-platform-manifest-dev-core:
    needs: [build-dev-core-arm64, build-dev-core-amd64, set_output_from_env]
    uses: ./.github/workflows/create_multi_platform_manifest.yml
    with:
      registry: ${{ needs.set_output_from_env.outputs.registry }}
      repo: ${{ needs.set_output_from_env.outputs.repo }}
      project-name: ${{ needs.set_output_from_env.outputs.project-name-core }}
      tag: ${{ needs.set_output_from_env.outputs.ros-distro }}

  create-multi-platform-manifest-source:
    needs: [build-source-arm64, build-source-amd64, set_output_from_env]
    uses: ./.github/workflows/create_multi_platform_manifest.yml
    with:
      registry: ${{ needs.set_output_from_env.outputs.registry }}
      repo: ${{ needs.set_output_from_env.outputs.repo }}
      project-name: ${{ needs.set_output_from_env.outputs.project-name-source }}
      tag: ${{ needs.set_output_from_env.outputs.ros-distro }}
    