name: Create Robast base images

# Trigger workflow on push to main branch and on workflow dispatch
on:
  push:
    branches:
      - main
    paths:
      - src/Dockerfile
      - src/Hardware/**
      - src/robot_backend/**
      - src/ros2/communication_interfaces/**
      - src/ros2/error_handling/**
  workflow_dispatch:

env:
  Ros-Distro: humble
  Registry: ghcr.io
  Repo: robast-gmbh/monorepo
  Project-Name: robast-dev-base

jobs:
  check-self-hosted:
    runs-on: ubuntu-latest
    outputs:
      self-hosted-available: ${{ steps.check.outputs.self-hosted-available }}
    steps:
    - name: Check if self-hosted runner is available
      id: check
      run: |
        if [[ "$(curl -s http://localhost:8080/self-hosted-available)" == "true" ]]; then
          echo "::set-output name=self-hosted-available::true"
        else
          echo "::set-output name=self-hosted-available::false"
        fi

  build-dev-base-arm64:
    runs-on: ${{ needs.check-self-hosted.outputs.self-hosted-available == 'true' && 'self-hosted' || 'ubuntu-latest' }}
    needs: check-self-hosted
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 1
    
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.Registry }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Configure Docker Buildx
      uses: docker/setup-buildx-action@v3 

    - name: Build and push ${{ env.Project-Name }} for arm64
      uses: docker/build-push-action@v6
      with:
        context: src/
        platforms: linux/arm64/v8
        push: true
        file: src/Dockerfile
        target: ${{ env.Project-Name }}
        tags: |
          ${{ env.Registry }}/${{ env.Repo }}/${{ env.Project-Name }}:${{ env.Ros-Distro }}-arm64
        cache-from: type=gha
        cache-to: type=gha

  build-dev-base-amd64:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 1
    
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.Registry }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Configure Docker Buildx
      uses: docker/setup-buildx-action@v3 

    - name: Build and push ${{ env.Project-Name }} for amd64
      uses: docker/build-push-action@v6
      with:
        context: src/
        platforms: linux/amd64
        push: true
        file: src/Dockerfile
        target: ${{ env.Project-Name }}
        tags: |
          ${{ env.Registry }}/${{ env.Repo }}/${{ env.Project-Name }}:${{ env.Ros-Distro }}-amd64
        cache-from: type=gha
        cache-to: type=gha

  build-dev-core-arm64:
    runs-on: ${{ needs.check-self-hosted.outputs.self-hosted-available == 'true' && 'self-hosted' || 'ubuntu-latest' }}
    needs: check-self-hosted
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 1
    
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.Registry }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Configure Docker Buildx
      uses: docker/setup-buildx-action@v3 

    - name: Build and push robast-dev-core for arm64
      uses: docker/build-push-action@v6
      with:
        context: src/
        platforms: linux/arm64/v8
        push: true
        file: src/Dockerfile
        target: robast-dev-core
        tags: |
          ${{ env.Registry }}/${{ env.Repo }}/robast-dev-core:${{ env.Ros-Distro }}-arm64
        cache-from: type=gha
        cache-to: type=gha

  build-dev-core-amd64:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 1
    
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.Registry }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Configure Docker Buildx
      uses: docker/setup-buildx-action@v3 

    - name: Build and push robast-dev-core for amd64
      uses: docker/build-push-action@v6
      with:
        context: src/
        platforms: linux/amd64
        push: true
        file: src/Dockerfile
        target: robast-dev-core
        tags: |
          ${{ env.Registry }}/${{ env.Repo }}/robast-dev-core:${{ env.Ros-Distro }}-amd64
        cache-from: type=gha
        cache-to: type=gha

  build-source-arm64:
    runs-on: ${{ needs.check-self-hosted.outputs.self-hosted-available == 'true' && 'self-hosted' || 'ubuntu-latest' }}
    needs: build-dev-base-arm64
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 1
    
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.Registry }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Configure Docker Buildx
      uses: docker/setup-buildx-action@v3 

    - name: Build and push robast-source for arm64
      uses: docker/build-push-action@v6
      with:
        context: src/
        platforms: linux/arm64/v8
        push: true
        file: src/Dockerfile
        target: robast-source
        tags: |
          ${{ env.Registry }}/${{ env.Repo }}/robast-source:${{ env.Ros-Distro }}-arm64
        cache-from: type=gha
        cache-to: type=gha

  build-source-amd64:
    runs-on: ubuntu-latest
    needs: build-dev-base-amd64
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 1
    
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.Registry }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Configure Docker Buildx
      uses: docker/setup-buildx-action@v3 

    - name: Build and push robast-source for amd64
      uses: docker/build-push-action@v6
      with:
        context: src/
        platforms: linux/amd64
        push: true
        file: src/Dockerfile
        target: robast-source
        tags: |
          ${{ env.Registry }}/${{ env.Repo }}/robast-source:${{ env.Ros-Distro }}-amd64
        cache-from: type=gha
        cache-to: type=gha

  create-multi-platform-manifest:
    runs-on: ubuntu-latest
    needs: [build-dev-base-arm64, build-dev-base-amd64]
    steps:
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.Registry }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Install jq
      run: sudo apt-get update && sudo apt-get install -y jq

    - name: Get digest for arm64 image
      id: digest-arm64
      run: |
        digest=$(docker buildx imagetools inspect --raw ${{ env.Registry }}/${{ env.Repo }}/${{ env.Project-Name }}:${{ env.Ros-Distro }}-arm64 | jq -r '.manifests[] | select(.platform.architecture == "arm64") | .digest')
        echo "::set-output name=digest::$digest"

    - name: Get digest for amd64 image
      id: digest-amd64
      run: |
        digest=$(docker buildx imagetools inspect --raw ${{ env.Registry }}/${{ env.Repo }}/${{ env.Project-Name }}:${{ env.Ros-Distro }}-amd64 | jq -r '.manifests[] | select(.platform.architecture == "amd64") | .digest')
        echo "::set-output name=digest::$digest"

    - name: Create and push multi-platform manifest
      run: |
        docker manifest create ${{ env.Registry }}/${{ env.Repo }}/${{ env.Project-Name }}:${{ env.Ros-Distro }} \
          --amend ${{ env.Registry }}/${{ env.Repo }}/${{ env.Project-Name }}@${{ steps.digest-arm64.outputs.digest }} \
          --amend ${{ env.Registry }}/${{ env.Repo }}/${{ env.Project-Name }}@${{ steps.digest-amd64.outputs.digest }}
        docker manifest push ${{ env.Registry }}/${{ env.Repo }}/${{ env.Project-Name }}:${{ env.Ros-Distro }}