{
        "version": "2.0.0",
        "tasks": [
                {
                        "label": "test",
                        "detail": "Run all unit tests and show results.",
                        "type": "shell",
                        "command": "source install/setup.bash; colcon test --event-handler=console_direct+; colcon test-result --all",
                        "group": {
                                "kind": "test",
                                "isDefault": true
                        }
                },
                {
                        "label": "clean-ros",
                        "detail": "Clean ros colcon build",
                        "type": "shell",
                        "command": "colcon build --cmake-target clean",
                        "problemMatcher": "$gcc"
                },
                {
                        "label": "clean",
                        "detail": "Purge and clean ros colcon build",
                        "dependsOn": [
                                "purge",
                                "clean-ros"
                        ],
                        "dependsOrder": "sequence",
                        "problemMatcher": []
                },
                {
                        "label": "build",
                        "detail": "Symlink Build",
                        "type": "shell",
                        "command": "colcon build --symlink-install --parallel-workers 8 --cmake-args '-DCMAKE_BUILD_TYPE=Release' -Wall -Wextra -Wpedantic",
                        "problemMatcher": []
                },
                {
                        "label": "debug-build",
                        "detail": "build used for debugging purposes",
                        "type": "shell",
                        "command": "colcon build --mixin debug --parallel-workers 8 --cmake-args '-DCMAKE_BUILD_TYPE=Debug' -Wall -Wextra -Wpedantic",
                        "problemMatcher": []
                },
                {
                        "label": "clean-build",
                        "detail": "Purges and symlink builds.",
                        "dependsOn": [
                                "purge",
                                "build"
                        ],
                        "dependsOrder": "sequence",
                        "problemMatcher": []
                },
                {
                        "label": "purge",
                        "detail": "Purge workspace by deleting all generated files.",
                        "type": "shell",
                        "command": "rm -fr build install log; py3clean .",
                        "problemMatcher": []
                },
                {
                        "type": "shell",
                        "label": "Convert RB Theron xacro -> urdf",
                        "command": "source /workspace/install/setup.bash; cd /workspace/src/robot_description/rb_theron_common/rb_theron_description/robots/; xacro rb_theron.urdf.xacro > rb_theron_single_urdf.urdf",
                        "problemMatcher": [],
                        "presentation": {
                                "echo": false,
                                "focus": false,
                                "group": "default_start"
                        }
                },
                {
                        "type": "shell",
                        "label": "start tiplu_sim",
                        "command": "source /workspace/install/setup.bash; ros2 launch tiplu_world tiplu_world_launch.py",
                        "problemMatcher": [],
                        "presentation": {
                                "echo": false,
                                "focus": false,
                                "group": "default_start"
                        }
                },
                {
                        "type": "shell",
                        "label": "start door_mechanism_world",
                        "command": "source /workspace/install/setup.bash; ros2 launch tiplu_world door_opening_mechanism_world_launch.py",
                        "problemMatcher": [],
                        "presentation": {
                                "echo": false,
                                "focus": false,
                                "group": "default_start"
                        }
                },
                {
                        "type": "shell",
                        "label": "start moveit_drawer",
                        "command": "source /workspace/install/setup.bash; ros2 launch moveit2_drawer_config moveit_launch.py",
                        "problemMatcher": [],
                        "presentation": {
                                "echo": false,
                                "focus": false,
                                "group": "default_start"
                        }
                },
                {
                        "type": "shell",
                        "label": "start moveit_door_opening_mechanism",
                        "command": "source /workspace/install/setup.bash; ros2 launch moveit_door_opening_mechanism_rotating_arm_config moveit_launch.py",
                        "problemMatcher": [],
                        "presentation": {
                                "echo": false,
                                "focus": false,
                                "group": "default_start"
                        }
                },
                {
                        "type": "shell",
                        "label": "start drawer_gazebo_trajectory_controller_manager",
                        "command": "source /workspace/install/setup.bash; ros2 launch gazebo_controller_manager gazebo_trajectory_controller_launch.py follow_joint_trajectory_action:='/drawer_planning_group_controller/follow_joint_trajectory' joint_names_list:=['drawer_1_joint','drawer_2_joint','drawer_3_joint','drawer_4_joint','drawer_5_joint']",
                        "problemMatcher": [],
                        "presentation": {
                                "echo": false,
                                "focus": false,
                                "group": "default_start"
                        }
                },
                {
                        "type": "shell",
                        "label": "start door_opening_mechanism_gazebo_robot_trajectory_executor_launch",
                        "command": "source /workspace/install/setup.bash; ros2 launch gazebo_controller_manager gazebo_robot_trajectory_executor_launch.py joint_names_list:=['door_opening_mechanism_joint_rotating_arm','door_opening_mechanism_joint_x_axis_slide','door_opening_mechanism_joint_y_axis_slide']",
                        "problemMatcher": [],
                        "presentation": {
                                "echo": false,
                                "focus": false,
                                "group": "default_start"
                        }
                },
                {
                        "type": "shell",
                        "label": "start door_opening_mechanism_gazebo_trajectory_controller_manager",
                        "command": "source /workspace/install/setup.bash; ros2 launch gazebo_controller_manager gazebo_trajectory_controller_launch.py follow_joint_trajectory_action:='/door_opening_mechanism_controller/follow_joint_trajectory' joint_names_list:=['door_opening_mechanism_joint_rotating_arm','door_opening_mechanism_joint_x_axis_slide','door_opening_mechanism_joint_y_axis_slide']",
                        "problemMatcher": [],
                        "presentation": {
                                "echo": false,
                                "focus": false,
                                "group": "default_start"
                        }
                },
                {
                        "type": "shell",
                        "label": "start drawer_bridge_simulation",
                        "command": "source /workspace/install/setup.bash; ros2 launch drawer_bridge_simulation drawer_bridge_simulation_launch.py",
                        "problemMatcher": [],
                        "presentation": {
                                "echo": false,
                                "focus": false,
                                "group": "default_start"
                        }
                },
                {
                        "type": "shell",
                        "label": "start door_opening_mechanism_simulation",
                        "command": "source /workspace/install/setup.bash; ros2 launch door_opening_mechanism_simulation door_opening_mechanism_simulation_launch.py",
                        "problemMatcher": [],
                        "presentation": {
                                "echo": false,
                                "focus": false,
                                "group": "default_start"
                        }
                },
                {
                        "type": "shell",
                        "label": "start door_opening_mechanism_simulation_send_fake_pose",
                        "command": "source /workspace/install/setup.bash; ros2 launch door_opening_mechanism_simulation door_opening_mechanism_simulation_send_fake_pose_launch.py",
                        "problemMatcher": [],
                        "presentation": {
                                "echo": false,
                                "focus": false,
                                "group": "default_start"
                        }
                },
                {
                        "type": "shell",
                        "label": "start door_opening_mechanism_simulation_motion_plan_request",
                        "command": "source /workspace/install/setup.bash; ros2 launch door_opening_mechanism_simulation door_opening_mechanism_simulation_motion_plan_request_launch.py",
                        "problemMatcher": [],
                        "presentation": {
                                "echo": false,
                                "focus": false,
                                "group": "default_start"
                        }
                },
                {
                        "label": "startup_sim_with_drawer_simulation",
                        "detail": "Starts tiplu_sim, moveit_drawer, drawer_gazebo_trajectory_controller_manager and drawer_bridge_simulation",
                        "dependsOn":
                        [
                                "start tiplu_sim",
                                "start moveit_drawer",
                                "start drawer_gazebo_controller_manager",
                                "start drawer_bridge_simulation"
                        ]
                },
                {
                        "label": "startup_sim_with_door_opening_simulation",
                        "detail": "Starts tiplu_sim, moveit_door_opening_mechanism, door_opening_mechanism_simulation, door_opening_mechanism_gazebo_trajectory_controller_manager",
                        "dependsOn": [
                                "start tiplu_sim",
                                "start moveit_door_opening_mechanism",
                                "start door_opening_mechanism_simulation",
                                "start door_opening_mechanism_gazebo_trajectory_controller_manager"
                        ],
                        "problemMatcher": []
                },
                {
                        "type": "shell",
                        "label": "start rviz",
                        "command": "source /workspace/install/setup.bash; ros2 launch nav_bringup rviz_launch.py",
                        "problemMatcher": [],
                        "presentation": {
                                "echo": false,
                                "focus": true
                        }
                },
                {
                        "label": "Open drawer 1 in simulation",
                        "detail": "Send topic message to open drawer 1 in simulation. The drawer will automatically be closed after a predetermined time period.",
                        "type": "shell",
                        "command": "source install/setup.bash; ros2 topic pub /open_drawer communication_interfaces/msg/DrawerAddress '{module_id: 1, drawer_id: 1}' --once",
                        "problemMatcher": []
                },
                {
                        "label": "Open drawer 2 in simulation",
                        "detail": "Send topic message to open drawer 2 in simulation. The drawer will automatically be closed after a predetermined time period.",
                        "type": "shell",
                        "command": "source install/setup.bash; ros2 topic pub /open_drawer communication_interfaces/msg/DrawerAddress '{module_id: 2, drawer_id: 1}' --once",
                        "problemMatcher": []
                },
                {
                        "label": "Open drawer 3 in simulation",
                        "detail": "Send topic message to open drawer 3 in simulation. The drawer will automatically be closed after a predetermined time period.",
                        "type": "shell",
                        "command": "source install/setup.bash; ros2 topic pub /open_drawer communication_interfaces/msg/DrawerAddress '{module_id: 3, drawer_id: 1}' --once",
                        "problemMatcher": []
                },
                {
                        "label": "Open drawer 4 in simulation",
                        "detail": "Send topic message to open drawer 4 in simulation. The drawer will automatically be closed after a predetermined time period.",
                        "type": "shell",
                        "command": "source install/setup.bash; ros2 topic pub /open_drawer communication_interfaces/msg/DrawerAddress '{module_id: 4, drawer_id: 1}' --once",
                        "problemMatcher": []
                },
                {
                        "label": "Open drawer 5 in simulation",
                        "detail": "Send topic message to open drawer 5 in simulation. The drawer will automatically be closed after a predetermined time period.",
                        "type": "shell",
                        "command": "source install/setup.bash; ros2 topic pub /open_drawer communication_interfaces/msg/DrawerAddress '{module_id: 5, drawer_id: 1}' --once",
                        "problemMatcher": []
                },
                {
                        "type": "shell",
                        "label": "build tests",
                        "command": "source /workspace/install/setup.bash; colcon build --symlink-install --packages-select testing_tools",
                        "problemMatcher": [],
                        "presentation": {
                                "echo": false,
                                "focus": false,
                                "group": "testing"
                        }
                },
                {
                        "label": "fix",
                        "detail": "Reformat files with uncrustify.",
                        "type": "shell",
                        "command": "ament_uncrustify --reformat src/",
                        "problemMatcher": []
                },
                {
                        "label": "uncrustify",
                        "detail": "Lint files with uncrustify.",
                        "type": "shell",
                        "command": "ament_uncrustify src/",
                        "presentation": {
                                "panel": "dedicated",
                                "reveal": "silent",
                                "clear": true
                        },
                        "problemMatcher": [
                                {
                                        "owner": "uncrustify",
                                        "source": " uncrustify",
                                        "fileLocation": "relative",
                                        "pattern": [
                                                {
                                                        "regexp": "^(.*)'(.*)':",
                                                        "kind": "file",
                                                        "file": 2,
                                                        "message": 1
                                                }
                                        ]
                                }
                        ]
                },
                {
                        "label": "cpplint",
                        "detail": "Lint files with cpplint.",
                        "type": "shell",
                        "command": "ament_cpplint src/",
                        "presentation": {
                                "panel": "dedicated",
                                "reveal": "silent",
                                "clear": true
                        },
                        "problemMatcher": [
                                {
                                        "owner": "cpplint",
                                        "source": " cpplint",
                                        "fileLocation": "absolute",
                                        "pattern": [
                                                {
                                                        "regexp": "^(.+):(\\d+):\\s+(.+)\\[(.+)\\]$",
                                                        "file": 1,
                                                        "line": 2,
                                                        "message": 3,
                                                        "code": 4
                                                }
                                        ]
                                }
                        ]
                },
                {
                        "label": "cppcheck",
                        "detail": "Run static code checker cppcheck.",
                        "type": "shell",
                        "command": "ament_cppcheck src/",
                        "presentation": {
                                "panel": "dedicated",
                                "reveal": "silent",
                                "clear": true
                        },
                        "problemMatcher": [
                                {
                                        "owner": "cppcheck",
                                        "source": "cppcheck",
                                        "pattern": [
                                                {
                                                        "regexp": "^\\[(.+):(\\d+)\\]:\\s+(.+)$",
                                                        "file": 1,
                                                        "line": 2,
                                                        "message": 3
                                                }
                                        ]
                                }
                        ]
                },
                {
                        "label": "lint_cmake",
                        "detail": "Run lint on cmake files.",
                        "type": "shell",
                        "command": "ament_lint_cmake src/",
                        "presentation": {
                                "panel": "dedicated",
                                "reveal": "silent",
                                "clear": true
                        },
                        "problemMatcher": [
                                {
                                        "owner": "lint_cmake",
                                        "source": "lint_cmake",
                                        "pattern": [
                                                {
                                                        "regexp": "^(.+):(\\d+):\\s+(.+)$",
                                                        "file": 1,
                                                        "line": 2,
                                                        "message": 3
                                                }
                                        ]
                                }
                        ]
                },
                {
                        "label": "flake8",
                        "detail": "Run flake8 on python files.",
                        "type": "shell",
                        "command": "ament_flake8 src/",
                        "presentation": {
                                "panel": "dedicated",
                                "reveal": "silent",
                                "clear": true
                        },
                        "problemMatcher": [
                                {
                                        "owner": "flake8",
                                        "source": "flake8",
                                        "pattern": [
                                                {
                                                        "code": 4,
                                                        "column": 3,
                                                        "file": 1,
                                                        "line": 2,
                                                        "message": 5,
                                                        "regexp": "^(.+):(\\d+):(\\d+): (\\w\\d+) (.+)$"
                                                }
                                        ]
                                }
                        ]
                },
                {
                        "label": "pep257",
                        "detail": "Run pep257 on python files.",
                        "type": "shell",
                        "command": "ament_pep257 src/",
                        "presentation": {
                                "panel": "dedicated",
                                "reveal": "silent",
                                "clear": true
                        },
                        "problemMatcher": [
                                {
                                        "owner": "pep257",
                                        "source": "pep257",
                                        "pattern": [
                                                {
                                                        "regexp": "^(.+):(\\d+)\\s+(.+):\\s+(.+):\\s+(.+)$",
                                                        "file": 1,
                                                        "line": 2,
                                                        "code": 4,
                                                        "message": 5
                                                }
                                        ]
                                }
                        ]
                },
                {
                        "label": "xmllint",
                        "detail": "Run xmllint on xml files.",
                        "type": "shell",
                        "command": "ament_xmllint src/",
                        "presentation": {
                                "panel": "dedicated",
                                "reveal": "silent",
                                "clear": true
                        },
                        "problemMatcher": [
                                {
                                        "owner": "xmllint",
                                        "source": "xmllint",
                                        "fileLocation": "absolute",
                                        "pattern": [
                                                {
                                                        "regexp": "^(.+):(\\d+):\\s+(.+)\\s+:\\s+(.+)$",
                                                        "file": 1,
                                                        "line": 2,
                                                        "code": 3,
                                                        "message": 4
                                                }
                                        ]
                                }
                        ]
                },
                {
                        "label": "lint all",
                        "detail": "Run all linters.",
                        "dependsOn": [
                                "cppcheck",
                                "cpplint",
                                "flake8",
                                "lint_cmake",
                                "pep257",
                                "xmllint",
                                "uncrustify"
                        ],
                        "problemMatcher": []
                },
                {
                        "label": "new ament_cmake package",
                        "detail": "Create a new ROS cpp package from a template.",
                        "type": "shell",
                        "command": "ros2 pkg create --destination-directory src --build-type ament_cmake ${input:package}",
                        "problemMatcher": []
                },
                {
                        "label": "new ament_python package",
                        "detail": "Create a new ROS python package from a template.",
                        "type": "shell",
                        "command": "ros2 pkg create --destination-directory src --build-type ament_python ${input:package}",
                        "problemMatcher": []
                },
                {
                        "label": "import from workspace file",
                        "detail": "Use vcs to import modules specified by a workspace/rosinstall file.",
                        "type": "shell",
                        "command": "vcs import < src/ros2.repos src",
                        "problemMatcher": []
                },
                {
                        "label": "update workspace file",
                        "detail": "Use vcs to update repositories in src to workspace file.",
                        "type": "shell",
                        "command": "vcs export src > src/ros2.repos",
                        "problemMatcher": []
                },
                {
                        "label": "install dependencies",
                        "detail": "Install all dependencies specified in the workspaces package.xml files.",
                        "type": "shell",
                        "command": "sudo apt-get update && rosdep update && rosdep install --from-paths src --ignore-src -y",
                        "problemMatcher": []
                },
                {
                        "type": "cppbuild",
                        "label": "C/C++: g++ build active file",
                        "command": "/usr/bin/g++",
                        "args": [
                                "-fdiagnostics-color=always",
                                "-g",
                                "${file}",
                                "-o",
                                "${fileDirname}/${fileBasenameNoExtension}"
                        ],
                        "options": {
                                "cwd": "${fileDirname}"
                        },
                        "problemMatcher": [
                                "$gcc"
                        ],
                        "group": "build",
                        "detail": "Task generated by Debugger."
                }
        ],
        "inputs": [
                {
                        "id": "package",
                        "type": "promptString",
                        "description": "Package name"
                }
        ]
}
