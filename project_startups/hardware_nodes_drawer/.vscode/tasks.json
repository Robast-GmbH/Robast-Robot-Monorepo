{
    // See https://go.microsoft.com/fwlink/?LinkId=733558
    // for the documentation about the tasks.json format
    "version": "2.0.0",
    "tasks": [
        {
            "label": "build",
            "detail": "Symlink Build.",
            "type": "shell",
            "command": "source ~/../../opt/ros/${ROS_DISTRO}/setup.bash; colcon build --symlink-install --cmake-args '-DCMAKE_BUILD_TYPE=RelWithDebInfo' -Wall -Wextra -Wpedantic",
            "problemMatcher": []
        },
        {
            "label": "Launch Drawer Bridge",
            "detail": "Launch the drawer bridge node",
            "type": "shell",
            "command": "source install/setup.bash; ros2 launch drawer_bridge drawer_bridge_launch.py;",
            "problemMatcher": []
        },
        {
            "label": "Drawer Bridge Startup",
            "detail": "Launch the drawer bridge node and the ros2 socket can node",
            "type": "shell",
            "dependsOn": [
                "Launch ros2 socket can",
                "Launch Drawer Bridge"
            ],
            "problemMatcher": []
        },
        {
            "label": "Launch ros2 socket can",
            "detail": "Launch ros2 socket can node",
            "type": "shell",
            "command": "source install/setup.bash;ros2 launch ros2_socketcan socket_can_bridge.launch.xml",
            "problemMatcher": []
        },
        {
            "label": "Open lock of drawer x",
            "detail": "Send topic message to open the lock of drawer with the module id x",
            "type": "shell",
            "command": "source install/setup.bash; ros2 topic pub /open_drawer communication_interfaces/msg/DrawerAddress '{module_id: ${input:module_id}, drawer_id: 0}' --once",
            "problemMatcher": []
        },
        {
            "label": "Change LED color to green for drawer x",
            "detail": "Send topic message to change led color to green for module id x",
            "type": "shell",
            "command": "source install/setup.bash; ros2 topic pub /led_cmd communication_interfaces/msg/LedCmd '{drawer_address: {module_id: ${input:module_id}, drawer_id: 0}, leds: [{red: 0, green: 255, blue: 0, brightness: 150}, {red: 0, green: 255, blue: 0, brightness: 150}, {red: 0, green: 255, blue: 0, brightness: 150}, {red: 0, green: 255, blue: 0, brightness: 150}, {red: 0, green: 255, blue: 0, brightness: 150}, {red: 0, green: 255, blue: 0, brightness: 150}, {red: 0, green: 255, blue: 0, brightness: 150}, {red: 0, green: 255, blue: 0, brightness: 150}, {red: 0, green: 255, blue: 0, brightness: 150}, {red: 0, green: 255, blue: 0, brightness: 150}, {red: 0, green: 255, blue: 0, brightness: 150}, {red: 0, green: 255, blue: 0, brightness: 150}, {red: 0, green: 255, blue: 0, brightness: 150}, {red: 0, green: 255, blue: 0, brightness: 150}, {red: 0, green: 255, blue: 0, brightness: 150}, {red: 0, green: 255, blue: 0, brightness: 150}, {red: 0, green: 255, blue: 0, brightness: 150}, {red: 0, green: 255, blue: 0, brightness: 150}], start_index: 0, fade_time_in_ms: 1000}' --once",
            "problemMatcher": []
        },
        {
            "label": "Change LED color to white for drawer x",
            "detail": "Send topic message to change led color to white for module id x",
            "type": "shell",
            "command": "source install/setup.bash; ros2 topic pub /led_cmd communication_interfaces/msg/LedCmd '{drawer_address: {module_id: ${input:module_id}, drawer_id: 0}, leds: [{red: 255, green: 255, blue: 255, brightness: 150}, {red: 255, green: 255, blue: 255, brightness: 150}, {red: 255, green: 255, blue: 255, brightness: 150}, {red: 255, green: 255, blue: 255, brightness: 150}, {red: 255, green: 255, blue: 255, brightness: 150}, {red: 255, green: 255, blue: 255, brightness: 150}, {red: 255, green: 255, blue: 255, brightness: 150}, {red: 255, green: 255, blue: 255, brightness: 150}, {red: 255, green: 255, blue: 255, brightness: 150}, {red: 255, green: 255, blue: 255, brightness: 150}, {red: 255, green: 255, blue: 255, brightness: 150}, {red: 255, green: 255, blue: 255, brightness: 150}, {red: 255, green: 255, blue: 255, brightness: 150}, {red: 255, green: 255, blue: 255, brightness: 150}, {red: 255, green: 255, blue: 255, brightness: 150}, {red: 255, green: 255, blue: 255, brightness: 150}, {red: 255, green: 255, blue: 255, brightness: 150}, {red: 255, green: 255, blue: 255, brightness: 150}], start_index: 0, fade_time_in_ms: 1000}' --once",
            "problemMatcher": []
        },
        {
            "label": "Move electrical drawer x out",
            "detail": "Send topic message to open electrical drawer x. Make sure the Lock was opened before via open lock.",
            "type": "shell",
            "command": "source install/setup.bash; ros2 topic pub /electrical_drawer_task communication_interfaces/msg/DrawerTask '{drawer_address: {module_id: ${input:module_id}, drawer_id: 0}, target_position: 250, speed: 200, stall_guard_value: 0}' --once",
            "problemMatcher": []
        },
        {
            "label": "Move electrical drawer x in",
            "detail": "Send topic message to open electrical drawer x",
            "type": "shell",
            "command": "source install/setup.bash; ros2 topic pub /electrical_drawer_task communication_interfaces/msg/DrawerTask '{drawer_address: {module_id: ${input:module_id}, drawer_id: 0}, target_position: 0, speed: 200, stall_guard_value: 0}' --once",
            "problemMatcher": []
        },
        {
            "label": "Docker serial setup",
            "detail": "copy the CAN and NFC device serial ports to new location with fixed name",
            "type": "shell",
            "command": "sudo bash .devcontainer/usb.sh ",
            "problemMatcher": []
        },
        {
            "label": "Test",
            "detail": "Build and executes all tests and shows the links to the testreport with Errors",
            "type": "shell",
            "dependsOn": [
                "build"
            ],
            "dependsOrder": "sequence",
            "command": "source install/setup.bash; colcon test --event-handler=console_direct+; colcon test-result --all",
            "problemMatcher": []
        },
        {
            "label": "Test nfc bridge",
            "detail": "Build and executes nfc bridge tests and shows the links to the testreport with Errors",
            "type": "shell",
            "dependsOn": [
                "build"
            ],
            "dependsOrder": "sequence",
            "command": "clear; source install/setup.bash; colcon test --packages-select nfc_bridge --event-handler=console_direct+; colcon test-result --all",
            "problemMatcher": []
        },
        {
            "label": "Test drawer bridge",
            "detail": "Build and executes drawer bridge tests and shows the links to the testreport with Errors",
            "type": "shell",
            "dependsOn": [
                "build"
            ],
            "dependsOrder": "sequence",
            "command": "clear; source install/setup.bash; colcon test --packages-select drawer_bridge --event-handler=console_direct+; colcon test-result --all",
            "problemMatcher": []
        },
        {
            "label": "Test can",
            "detail": "Build and executes can tests and shows the links to the testreport with Errors",
            "type": "shell",
            "dependsOn": [
                "build"
            ],
            "dependsOrder": "sequence",
            "command": "clear; source install/setup.bash; colcon test --packages-select can --event-handler=console_direct+; colcon test-result --all",
            "problemMatcher": []
        },
        {
            "label": "clean-build",
            "detail": "Purges and symlink colcon build",
            "dependsOn": [
                "purge",
                "build"
            ],
            "dependsOrder": "sequence",
            "problemMatcher": []
        },
        1
        {
            "label": "purge",
            "detail": "Purge workspace by deleting all generated files.",
            "type": "shell",
            "command": "rm -fr build install log; py3clean .",
            "problemMatcher": []
        }
    ],
    "inputs": [
        {
            "id": "package",
            "type": "promptString",
            "description": "Package name"
        },
        {
            "id": "module_id",
            "type": "promptString",
            "description": "Module ID"
        }
    ]
}