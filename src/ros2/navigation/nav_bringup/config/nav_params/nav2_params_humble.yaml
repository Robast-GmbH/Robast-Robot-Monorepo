bt_navigator:
  ros__parameters:
    use_sim_time: False
    global_frame: map
    robot_base_frame: robot_base_footprint
    odom_topic: odometry/filtered
    bt_loop_duration: 10 #neu
    default_server_timeout: 20 #neu
    enable_groot_monitoring: False
    pose_groot_publisher_port: 1666
    pose_groot_server_port: 1667
    poses_groot_publisher_port: 1668
    poses_groot_server_port: 1669
    plugin_lib_names:
    - nav2_compute_path_to_pose_action_bt_node
    - nav2_compute_path_through_poses_action_bt_node
    - nav2_smooth_path_action_bt_node
    - nav2_follow_path_action_bt_node
    - nav2_spin_action_bt_node
    - nav2_wait_action_bt_node
    - nav2_assisted_teleop_action_bt_node
    - nav2_back_up_action_bt_node
    - nav2_drive_on_heading_bt_node
    - nav2_clear_costmap_service_bt_node
    - nav2_is_stuck_condition_bt_node
    - nav2_goal_reached_condition_bt_node
    - nav2_goal_updated_condition_bt_node
    - nav2_globally_updated_goal_condition_bt_node
    - nav2_is_path_valid_condition_bt_node
    - nav2_initial_pose_received_condition_bt_node
    - nav2_reinitialize_global_localization_service_bt_node
    - nav2_rate_controller_bt_node
    - nav2_distance_controller_bt_node
    - nav2_speed_controller_bt_node
    - nav2_truncate_path_action_bt_node
    - nav2_truncate_path_local_action_bt_node
    - nav2_goal_updater_node_bt_node
    - nav2_recovery_node_bt_node
    - nav2_pipeline_sequence_bt_node
    - nav2_round_robin_node_bt_node
    - nav2_transform_available_condition_bt_node
    - nav2_time_expired_condition_bt_node
    - nav2_path_expiring_timer_condition
    - nav2_distance_traveled_condition_bt_node
    - nav2_single_trigger_bt_node
    - nav2_goal_updated_controller_bt_node
    - nav2_is_battery_low_condition_bt_node
    - nav2_navigate_through_poses_action_bt_node
    - nav2_navigate_to_pose_action_bt_node
    - nav2_remove_passed_goals_action_bt_node
    - nav2_planner_selector_bt_node
    - nav2_controller_selector_bt_node
    - nav2_goal_checker_selector_bt_node
    - nav2_controller_cancel_bt_node
    - nav2_path_longer_on_approach_bt_node
    - nav2_wait_cancel_bt_node
    - nav2_spin_cancel_bt_node
    - nav2_back_up_cancel_bt_node
    - nav2_assisted_teleop_cancel_bt_node
    - nav2_drive_on_heading_cancel_bt_node
    # - check_topic_state_condition_bt_node
    # - change_footprint_action_bt_node
    # - change_footprint_padding_action_bt_node


bt_navigator_navigate_through_poses_rclcpp_node:
  ros__parameters:
    use_sim_time: False

bt_navigator_navigate_to_pose_rclcpp_node:
  ros__parameters:
    use_sim_time: False

controller_server:
  ros__parameters:
    controller_frequency: 30.0
    FollowPath:
      plugin: "nav2_mppi_controller::MPPIController"
      time_steps: 56
      model_dt: 0.05
      batch_size: 2000
      vx_std: 0.2
      vy_std: 0.0
      wz_std: 0.4
      vx_max: 0.4
      vx_min: 0.07
      vy_max: 0.0
      wz_max: 1.9
      iteration_count: 1
      prune_distance: 1.7
      transform_tolerance: 0.1
      temperature: 0.3
      gamma: 0.015
      motion_model: "DiffDrive"
      visualize: false
      reset_period: 1.0 # (only in Humble)
      TrajectoryVisualizer:
        trajectory_step: 5
        time_step: 3
      AckermannConstrains:
        min_turning_r: 0.1
      critics: ["ConstraintCritic", "ObstaclesCritic", "GoalCritic", "GoalAngleCritic", "PathAlignCritic", "PathFollowCritic", "PathAngleCritic", "PreferForwardCritic"]
      ConstraintCritic:
        enabled: true
        cost_power: 1
        cost_weight: 4.0
      GoalCritic:
        enabled: true
        cost_power: 1
        cost_weight: 5.0
        threshold_to_consider: 1.0
      GoalAngleCritic:
        enabled: true
        cost_power: 1
        cost_weight: 3.0
        threshold_to_consider: 0.4
      PreferForwardCritic:
        enabled: true
        cost_power: 1
        cost_weight: 5.0
        threshold_to_consider: 0.4
      ObstaclesCritic:
        enabled: true
        cost_power: 1
        repulsion_weight: 1.5
        critical_weight: 20.0
        consider_footprint: true
        collision_cost: 10000.0
        collision_margin_distance: 0.05
        near_goal_distance: 0.5
        inflation_radius: 2.5 # (only in Humble)
        cost_scaling_factor: 10.0 # (only in Humble)
      PathAlignCritic:
        enabled: true
        cost_power: 1
        cost_weight: 14.0
        max_path_occupancy_ratio: 0.05
        trajectory_point_step: 3
        threshold_to_consider: 0.40
        offset_from_furthest: 20
        mode: 2
      PathFollowCritic:
        enabled: true
        cost_power: 1
        cost_weight: 5.0
        offset_from_furthest: 5
        threshold_to_consider: 0.6
      PathAngleCritic:
        enabled: true
        cost_power: 1
        cost_weight: 2.0
        offset_from_furthest: 4
        threshold_to_consider: 0.40
        max_angle_to_furthest: 1.0
      # TwirlingCritic:
      #   enabled: true
      #   twirling_cost_power: 1
      #   twirling_cost_weight: 10.0    


controller_server_rclcpp_node:
  ros__parameters:
    use_sim_time: False
local_costmap:
  local_costmap:
    ros__parameters:
      update_frequency: 5.0
      publish_frequency: 2.0
      global_frame: robot_odom
      robot_base_frame: robot_base_footprint
      map_topic: /map
      use_sim_time: False
      rolling_window: true
      width: 5
      height: 5
      footprint: "[ [0.4, 0.35], [0.4, -0.35], [-0.4, -0.35], [-0.4, 0.35] ]" # rb_theron footprint
      footprint_padding: 0.05
      resolution: 0.05
      plugins: ["stvl_layer", "inflation_layer"]
      filters: ["keepout_filter"]
      keepout_filter:
        plugin: "nav2_costmap_2d::KeepoutFilter"
        enabled: True
        filter_info_topic: "/costmap_filter_info"
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: True
        observation_sources: scan
        scan:
          topic: /robot/front_laser/scan
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          data_type: "LaserScan"
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 4.0
        inflation_radius: 2.5
        enabled: True
        inflate_unknown: false
        inflate_around_unknown: false
      nonpersisting_obstacle_layer:
            plugin: nav2_costmap_2d/NonPersistentVoxelLayer
            enabled:              false
            track_unknown_space:  true
            max_obstacle_height:  1.8
            unknown_threshold:    15
            mark_threshold:       2
            combination_method:   1
            obstacle_range: 6.0
            origin_z: 0.
            z_resolution: 0.075
            z_voxels: 16
            publish_voxel_map: true
            observation_sources: lidar
            lidar:
              data_type: PointCloud2
              topic: /stereo/points
              marking: true
              min_obstacle_height: 0.3
              max_obstacle_height: 1.5            
      stvl_layer:
        plugin: "spatio_temporal_voxel_layer/SpatioTemporalVoxelLayer"
        enabled: true
        voxel_decay: 1.0 # seconds if linear, e^n if exponential
        decay_model: 0 # 0=linear, 1=exponential, -1=persistent
        voxel_size: 0.05 # meters
        track_unknown_space: true # default space is known
        unknown_threshold: 15
        mark_threshold: 1 # voxel height
        update_footprint_enabled: true
        combination_method: 1 # 1=max, 0=override
        origin_z: 0.0
        publish_voxel_map: true
        transform_tolerance: 0.2
        mapping_mode: false
        map_save_duration: 60.0
        observation_sources: sick_safevisionary lidar2d_marking 
        lidar3d_marking:
          enabled: true
          data_type: PointCloud2
          topic: /robot/bpearl_laser/scan
          marking: true
          clearing: true
          obstacle_range: 6.0
          min_obstacle_height: 0.2
          max_obstacle_height: 1.8
          expected_update_rate: 0.2 # default 0, if not updating at this rate at least, remove from buffer
          observation_persistence: 0.0 # default 0, use all measurements taken during now-value, 0=latest
          inf_is_valid: false # default false, for laser scans
          filter: "voxel" # default passthrough, apply "voxel", "passthrough", or no filter to sensor data, recommend on
          voxel_min_points: 60
          clear_after_reading: true # default false, clear the buffer after the layer gets readings from it
          max_z: 2.0
          min_z: 0.3
          vertical_fov_angle: 3.14   # default 0.7, radians. For 3D lidars it's the symmetric FOV about the planar axis.
          vertical_fov_padding: 0.00    # 3D Lidar only. Default 0, in meters 
          horizontal_fov_angle: 3.14 # 3D lidar scanners like the VLP16 have 360 deg horizontal FOV.
          decay_acceleration: 0.0 # default 0, 1/s^2. If laser scanner MUST be 0
          model_type: 1 # default 0, model type for frustum. 0=depth camera, 1=3d lidar like VLP16 or similar
        lidar3d_clearing:
          enabled: false
          data_type: PointCloud2
          topic: /robot/bpearl_laser/scan
          marking: false
          clearing: true
          obstacle_range: 7.0
          min_obstacle_height: 0.1
          max_obstacle_height: 1.9
          expected_update_rate: 6.0 # default 0, if not updating at this rate at least, remove from buffer
          observation_persistence: 0.0 # default 0, use all measurements taken during now-value, 0=latest
          inf_is_valid: false # default false, for laser scans
          filter: "passthrough" # default passthrough, apply "voxel", "passthrough", or no filter to sensor data, recommend on
          voxel_min_points: 0
          clear_after_reading: true # default false, clear the buffer after the layer gets readings from it
          max_z: 2.0
          min_z: 0.3
          vertical_fov_angle: 1.57   # default 0.7, radians. For 3D lidars it's the symmetric FOV about the planar axis.
          vertical_fov_padding: 0.00    # 3D Lidar only. Default 0, in meters 
          horizontal_fov_angle: 3.14 # 3D lidar scanners like the VLP16 have 360 deg horizontal FOV.
          decay_acceleration: 0.0 # default 0, 1/s^2. If laser scanner MUST be 0
          model_type: 1 # default 0, model type for frustum. 0=depth camera, 1=3d lidar like VLP16 or similar
        lidar2d_marking:
          enabled: true
          data_type: LaserScan
          topic: /robot/front_laser/scan
          marking: true
          clearing: true
          obstacle_range: 5.0
          min_obstacle_height: 0.1
          max_obstacle_height: 1.0
          expected_update_rate: 0.0
          observation_persistence: 0.0
          inf_is_valid: false
          filter: "voxel"
          voxel_min_points: 0
          clear_after_reading: true # default false, clear the buffer after the layer gets readings from it
          max_z: 1.0
          min_z: 0.1
          vertical_fov_angle: 0.01
          horizontal_fov_angle: 3.14
          decay_acceleration: 0.0
          model_type: 1
        oak_marking:
          enabled: true
          data_type: PointCloud2
          topic: /stereo/points
          marking: true
          clearing: false
          obstacle_range: 5.0          # meters
          min_obstacle_height: 0.3     # default 0, meters
          max_obstacle_height: 1.55     # default 3, meters
          expected_update_rate: 0.00    # default 0, if not updating at this rate at least, remove from buffer
          observation_persistence: 0.0 # default 0, use all measurements taken during now-value, 0=latest
          horizontal_fov_angle: 1.048 # default 1.04, radians
          inf_is_valid: false          # default false, for laser scans
          filter: "passthrough"        # default passthrough, apply "voxel", "passthrough", or no filter to sensor data, recommend on 
          voxel_min_points: 2         # default 0, minimum points per voxel for voxel filter
          clear_after_reading: true    # default false, clear the buffer after the layer gets readings from it
        oak_clearing:
          enabled: true
          data_type: PointCloud2
          topic: /stereo/points
          marking: false
          clearing: true
          max_z: 7.0                  # default 0, meters
          min_z: 0.1                  # default 10, meters
          vertical_fov_angle: 0.8745  # default 0.7, radians
          horizontal_fov_angle: 1.048 # default 1.04, radians
          decay_acceleration: 5.0     # default 0, 1/s^2. If laser scanner MUST be 0
          model_type: 0                # default 0, model type for frustum. 0=depth camera, 1=3d lidar like VLP16 or similar
        sick_safevisionary:
          enabled: true
          data_type: PointCloud2
          topic: /sick_safevisionary/points
          marking: true
          clearing: true
          obstacle_range: 5.0
          min_obstacle_height: 0.08
          max_obstacle_height: 1.8
          expected_update_rate: 0.1 # default 0, if not updating at this rate at least, remove from buffer
          observation_persistence: 0.0 # default 0, use all measurements taken during now-value, 0=latest
          inf_is_valid: false # default false, for laser scans
          filter: "voxel" # default passthrough, apply "voxel", "passthrough", or no filter to sensor data, recommend on
          voxel_min_points: 16
          clear_after_reading: true # default false, clear the buffer after the layer gets readings from it
          max_z: 1.4
          min_z: 0.05
          vertical_fov_angle: 1.01   # default 0.7, radians. For 3D lidars it's the symmetric FOV about the planar axis.
          vertical_fov_padding: 0.00    # 3D Lidar only. Default 0, in meters 
          horizontal_fov_angle: 1.18 # 3D lidar scanners like the VLP16 have 360 deg horizontal FOV.
          decay_acceleration: 0.0 # default 0, 1/s^2. If laser scanner MUST be 0
          model_type: 0 # default 0, model type for frustum. 0=depth camera, 1=3d lidar like VLP16 or similar
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_subscribe_transient_local: True
      always_send_full_costmap: True
  local_costmap_client:
    ros__parameters:
      use_sim_time: False
  local_costmap_rclcpp_node:
    ros__parameters:
      use_sim_time: False

global_costmap:
  global_costmap:
    ros__parameters:
      update_frequency: 1.0
      publish_frequency: 1.0
      global_frame: map
      robot_base_frame: robot_base_footprint
      map_topic: /map
      use_sim_time: False
      footprint: "[ [0.4, 0.35], [0.4, -0.35], [-0.4, -0.35], [-0.4, 0.35] ]" # rb_theron footprint
      footprint_padding: 0.05
      resolution: 0.05
      track_unknown_space: true
      plugins: ["static_layer", "stvl_layer", "inflation_layer"]
      filters: ["keepout_filter"]
      keepout_filter:
        plugin: "nav2_costmap_2d::KeepoutFilter"
        enabled: True
        filter_info_topic: "/costmap_filter_info"
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: false
        observation_sources: scan
        scan:
          topic: /robot/front_laser/scan
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          data_type: "LaserScan"
          raytrace_max_range: 3.0
          raytrace_min_range: 0.0
          obstacle_max_range: 2.5
          obstacle_min_range: 0.0
          inf_is_valid: false
      static_layer:
        #enabled: True
        plugin: "nav2_costmap_2d::StaticLayer"
        map_subscribe_transient_local: True
        subscribe_to_updates: false
        transform_tolerance: 0.1
      stvl_layer:
        plugin: "spatio_temporal_voxel_layer/SpatioTemporalVoxelLayer"
        enabled: true
        voxel_decay: 5.0 # seconds if linear, e^n if exponential
        decay_model: 0 # 0=linear, 1=exponential, -1=persistent
        voxel_size: 0.05 # meters
        track_unknown_space: true # default space is known
        unknown_threshold: 15
        mark_threshold: 2 # voxel height
        update_footprint_enabled: true
        combination_method: 1 # 1=max, 0=override
        origin_z: 0.0
        publish_voxel_map: false
        transform_tolerance: 0.2
        mapping_mode: false
        map_save_duration: 60.0
        observation_sources: lidar2d sick_safevisionary
        lidar3d_marking:
          enabled: true
          data_type: PointCloud2
          topic: /robot/bpearl_laser/scan
          marking: true
          clearing: true
          obstacle_range: 5.0
          min_obstacle_height: 0.10
          max_obstacle_height: 1.8
          expected_update_rate: 0.25 # default 0, if not updating at this rate at least, remove from buffer
          observation_persistence: 0.0 # default 0, use all measurements taken during now-value, 0=latest
          inf_is_valid: false # default false, for laser scans
          filter: "passthrough" # default passthrough, apply "voxel", "passthrough", or no filter to sensor data, recommend on
          voxel_min_points: 10
          clear_after_reading: true # default false, clear the buffer after the layer gets readings from it
          max_z: 1.5
          min_z: 0.10
          vertical_fov_angle: 3.14   # default 0.7, radians. For 3D lidars it's the symmetric FOV about the planar axis.
          vertical_fov_padding: 0.05    # 3D Lidar only. Default 0, in meters 
          horizontal_fov_angle: 3.14 # 3D lidar scanners like the VLP16 have 360 deg horizontal FOV.
          decay_acceleration: 0.0 # default 0, 1/s^2. If laser scanner MUST be 0
          model_type: 1 # default 0, model type for frustum. 0=depth camera, 1=3d lidar like VLP16 or similar
        lidar3d_clearing:
          enabled: false
          data_type: PointCloud2
          topic: /robot/bpearl_laser/scan
          marking: false
          clearing: true
          obstacle_range: 15.0
          min_obstacle_height: 0.1
          max_obstacle_height: 1.9
          expected_update_rate: 0.0 # default 0, if not updating at this rate at least, remove from buffer
          observation_persistence: 0.0 # default 0, use all measurements taken during now-value, 0=latest
          inf_is_valid: false # default false, for laser scans
          filter: "voxel" # default passthrough, apply "voxel", "passthrough", or no filter to sensor data, recommend on
          voxel_min_points: 1
          clear_after_reading: true # default false, clear the buffer after the layer gets readings from it
          max_z: 1.5
          min_z: 0.3
          vertical_fov_angle: 3.14   # default 0.7, radians. For 3D lidars it's the symmetric FOV about the planar axis.
          vertical_fov_padding: 0.05    # 3D Lidar only. Default 0, in meters 
          horizontal_fov_angle: 3.14 # 3D lidar scanners like the VLP16 have 360 deg horizontal FOV.
          decay_acceleration: 0.0 # default 0, 1/s^2. If laser scanner MUST be 0
          model_type: 1 # default 0, model type for frustum. 0=depth camera, 1=3d lidar like VLP16 or similar
        lidar2d:
          enabled: true
          data_type: LaserScan
          topic: /robot/front_laser/scan
          marking: true
          clearing: true
          obstacle_range: 15.0
          min_obstacle_height: 0.1
          max_obstacle_height: 1.0
          expected_update_rate: 0.0
          observation_persistence: 0.0
          inf_is_valid: false
          filter: "voxel"
          voxel_min_points: 0
          clear_after_reading: true # default false, clear the buffer after the layer gets readings from it
          max_z: 1.0
          min_z: 0.1
          vertical_fov_angle: 0.01
          horizontal_fov_angle: 3.14
          decay_acceleration: 0.0
          model_type: 1
        oak_marking:
          enabled: true
          data_type: PointCloud2
          topic: /stereo/points
          marking: true
          clearing: true
          obstacle_range: 5.0          # meters
          min_obstacle_height: 0.3     # default 0, meters
          max_obstacle_height: 2.0     # default 3, meters
          expected_update_rate: 0.00   # default 0, if not updating at this rate at least, remove from buffer
          observation_persistence: 1.0 # default 0, use all measurements taken during now-value, 0=latest
          inf_is_valid: false          # default false, for laser scans
          filter: ""        # default passthrough, apply "voxel", "passthrough", or no filter to sensor data, recommend on 
          voxel_min_points: 0          # default 0, minimum points per voxel for voxel filter
          clear_after_reading: false    # default false, clear the buffer after the layer gets readings from it
          vertical_fov_angle: 0.8745  # default 0.7, radians
          horizontal_fov_angle: 1.048 # default 1.04, radians
          decay_acceleration: 10.0     # default 0, 1/s^2. If laser scanner MUST be 0
          max_z: 1.5                  # default 0, meters
          min_z: 0.1                  # default 10, meters
          model_type: 0 
        oak_clearing:
          data_type: PointCloud2
          topic: /stereo/points
          marking: false
          clearing: true
          max_z: 7.0                  # default 0, meters
          min_z: 0.1                  # default 10, meters
          vertical_fov_angle: 0.8745  # default 0.7, radians
          horizontal_fov_angle: 1.048 # default 1.04, radians
          decay_acceleration: 5.0     # default 0, 1/s^2. If laser scanner MUST be 0
          model_type: 0                # default 0, model type for frustum. 0=depth camera, 1=3d lidar like VLP16 or similar
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 4.0
        inflation_radius: 2.5
        enabled: true
        inflate_unknown: false
        inflate_around_unknown: false
      always_send_full_costmap: True #Wenn false, dann drucker

planner_server:
  ros__parameters:
    expected_planner_frequency: 5.0
    use_sim_time: False
    planner_plugins: ["GridBased"]
    GridBased:
      plugin: "nav2_navfn_planner/NavfnPlanner"
      tolerance: 0.5
      use_astar: false
      allow_unknown: true
    # GridBased:
    #   plugin: "nav2_smac_planner/SmacPlannerLattice"
    #   tolerance: 0.5                      # tolerance for planning if unable to reach exact pose, in meters
    #   downsample_costmap: false           # whether or not to downsample the map
    #   downsampling_factor: 1              # multiplier for the resolution of the costmap layer (e.g. 2 on a 5cm costmap would be 10cm)
    #   allow_unknown: false                # allow traveling in unknown space
    #   max_iterations: 1000000             # maximum total iterations to search for before failing (in case unreachable), set to -1 to disable
    #   max_on_approach_iterations: 1000    # maximum number of iterations to attempt to reach goal once in tolerance
    #   max_planning_time: 3.5              # max time in s for planner to plan, smooth, and upsample. Will scale maximum smoothing and upsampling times based on remaining time after planning.
    #   motion_model_for_search: "DUBIN"    # For Hybrid Dubin, Redds-Shepp
    #   cost_travel_multiplier: 2.0         # For 2D: Cost multiplier to apply to search to steer away from high cost areas. Larger values will place in the center of aisles more exactly (if non-`FREE` cost potential field exists) but take slightly longer to compute. To optimize for speed, a value of 1.0 is reasonable. A reasonable tradeoff value is 2.0. A value of 0.0 effective disables steering away from obstacles and acts like a naive binary search A*.
    #   angle_quantization_bins: 64         # For Hybrid nodes: Number of angle bins for search, must be 1 for 2D node (no angle search)
    #   analytic_expansion_ratio: 3.5       # For Hybrid/Lattice nodes: The ratio to attempt analytic expansions during search for final approach.
    #   analytic_expansion_max_length: 1.5    # For Hybrid/Lattice nodes: The maximum length of the analytic expansion to be considered valid to prevent unsafe shortcutting (in meters). This should be scaled with minimum turning radius and be no less than 4-5x the minimum radius
    #   minimum_turning_radius: 0.2        # For Hybrid/Lattice nodes: minimum turning radius in m of path / vehicle
    #   reverse_penalty: 3.1                # For Reeds-Shepp model: penalty to apply if motion is reversing, must be => 1
    #   change_penalty: 0.2                 # For Hybrid nodes: penalty to apply if motion is changing directions, must be >= 0
    #   non_straight_penalty: 1.20          # For Hybrid nodes: penalty to apply if motion is non-straight, must be => 1
    #   cost_penalty: 2.0                   # For Hybrid nodes: penalty to apply to higher cost areas when adding into the obstacle map dynamic programming distance expansion heuristic. This drives the robot more towards the center of passages. A value between 1.3 - 3.5 is reasonable.
    #   retrospective_penalty: 0.025        # For Hybrid/Lattice nodes: penalty to prefer later maneuvers before earlier along the path. Saves search time since earlier nodes are not expanded until it is necessary. Must be >= 0.0 and <= 1.0
    #   rotation_penalty: 0.10               # For Lattice node: Penalty to apply only to pure rotate in place commands when using minimum control sets containing rotate in place primitives. This should always be set sufficiently high to weight against this action unless strictly necessary for obstacle avoidance or there may be frequent discontinuities in the plan where it requests the robot to rotate in place to short-cut an otherwise smooth path for marginal path distance savings.
    #   lookup_table_size: 20.0               # For Hybrid nodes: Size of the dubin/reeds-sheep distance window to cache, in meters.
    #   cache_obstacle_heuristic: True      # For Hybrid nodes: Cache the obstacle map dynamic programming distance expansion heuristic between subsiquent replannings of the same goal location. Dramatically speeds up replanning performance (40x) if costmap is largely static.  
    #   allow_reverse_expansion: False      # For Lattice nodes: Whether to expand state lattice graph in forward primitives or reverse as well, will double the branching factor at each step.   
    #   smooth_path: True                   # For Lattice/Hybrid nodes: Whether or not to smooth the path, always true for 2D nodes.
    #   viz_expansions: False                # For Hybrid nodes: Whether to publish expansions on the /expansions topic as an array of poses (the orientation has no meaning). WARNING: heavy to compute and to display, for debug only as it degrades the performance. 
    #   smoother:
    #     max_iterations: 1000
    #     w_smooth: 0.2
    #     w_data: 0.1
    #     tolerance: 1e-10
    #     do_refinement: true               # Whether to recursively run the smoother 3 times on the results from prior runs to refine the results further

smoother_server:
  ros__parameters:
    use_sim_time: False
    smoother_plugins: ["simple_smoother"]
    simple_smoother:
      plugin: "nav2_smoother::SimpleSmoother"
      tolerance: 1.0e-10
      max_its: 1000
      do_refinement: True

behavior_server:
  ros__parameters:
    costmap_topic: local_costmap/costmap_raw
    footprint_topic: local_costmap/published_footprint
    cycle_frequency: 10.0
    behavior_plugins: ["spin", "backup", "drive_on_heading", "assisted_teleop", "wait"]
    spin:
      plugin: "nav2_behaviors/Spin"
    backup:
      plugin: "nav2_behaviors/BackUp"
    drive_on_heading:
      plugin: "nav2_behaviors/DriveOnHeading"
    wait:
      plugin: "nav2_behaviors/Wait"
    assisted_teleop:
      plugin: "nav2_behaviors/AssistedTeleop"
    global_frame: robot_odom
    robot_base_frame: robot_base_footprint
    transform_tolerance: 0.1
    use_sim_time: true
    simulate_ahead_time: 2.0
    max_rotational_vel: 1.0
    min_rotational_vel: 0.4
    rotational_acc_lim: 3.2

robot_state_publisher:
  ros__parameters:
    use_sim_time: False

waypoint_follower:
  ros__parameters:
    use_sim_time: False
    loop_rate: 20
    stop_on_failure: false
    waypoint_task_executor_plugin: "wait_at_waypoint"
    wait_at_waypoint:
      plugin: "nav2_waypoint_follower::WaitAtWaypoint"
      enabled: True
      waypoint_pause_duration: 200

velocity_smoother: #TODO check parameters
  ros__parameters:
    use_sim_time: False
    smoothing_frequency: 20.0
    scale_velocities: false
    feedback: "OPEN_LOOP"
    max_velocity: [1.00, 0.0, 1.0]
    min_velocity: [-0.1, 0.0, -1.0]
    max_accel: [2.0, 0.0, 2.5]
    max_decel: [-2.0, 0.0, -2.5]
    odom_topic: "odometry/filtered"
    odom_duration: 0.1
    deadband_velocity: [0.0, 0.0, 0.0]
    velocity_timeout: 1.0

collision_monitor:
  ros__parameters:
    use_sim_time: true
    base_frame_id: "base_footprint"
    odom_frame_id: "odom"
    cmd_vel_in_topic: "cmd_vel_smoothed"
    cmd_vel_out_topic: "cmd_vel"
    state_topic: "collision_monitor_state"
    transform_tolerance: 0.2
    source_timeout: 2.0
    base_shift_correction: False
    stop_pub_timeout: 2.0
    # Polygons represent zone around the robot for "stop", "slowdown" and "limit" action types,
    # and robot footprint for "approach" action type.
    # Footprint could be "polygon" type with dynamically set footprint from footprint_topic
    # or "circle" type with static footprint set by radius. "footprint_topic" parameter
    # to be ignored in circular case.

    #"[ [0.35, 0.30], [0.35, -0.3], [-0.35, -0.30], [-0.35, 0.3] ]" # rb_theron footprint
    polygons: ["PolygonStop", "PolygonSlowMinor", PolygonSlowHard]
    PolygonStop:
      type: "polygon"
      points: [0.45, 0.4, 0.45, -0.4, 0.0, -0.4, 0.0, 0.4]
      action_type: "stop"
      min_points: 4
      visualize: True
      polygon_pub_topic: "polygon_stop"
    PolygonSlowHard:
      type: "polygon"
      points: [0.6, 0.5, 0.6, -0.5, -0.6, -0.5, -0.6, 0.5]
      action_type: "slowdown"
      min_points: 4
      slowdown_ratio: 0.3
      visualize: True
      polygon_pub_topic: "polygon_slowdown_hard"
    PolygonSlowMinor:
      type: "polygon"
      points: [0.8, 0.5, 0.8, -0.5, -0.2, -0.6, -0.2, 0.6]
      action_type: "slowdown"
      min_points: 4
      slowdown_ratio: 0.7
      visualize: True
      polygon_pub_topic: "polygon_slowdown_minor"
    PolygonLimit:
      type: "polygon"
      points: [0.9, 0.9, 0.9, -0.9, -0.9, -0.9, -0.9, 0.9]
      action_type: "limit"
      min_points: 4
      linear_limit: 0.2
      angular_limit: 0.4
      visualize: True
      polygon_pub_topic: "polygon_limit"
    FootprintApproach:
      type: "polygon"
      action_type: "approach"
      footprint_topic: "/local_costmap/published_footprint"
      time_before_collision: 2.0
      simulation_time_step: 0.1
      min_points: 6
      visualize: True
    observation_sources: ["scan"]
    scan:
      type: "scan"
      topic: "/front_laser/scan"
