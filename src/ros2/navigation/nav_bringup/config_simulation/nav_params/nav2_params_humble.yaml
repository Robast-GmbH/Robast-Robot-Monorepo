bt_navigator:
  ros__parameters:
    use_sim_time: True
    global_frame: map
    robot_base_frame: base_link
    odom_topic: /odom
    bt_loop_duration: 10
    default_server_timeout: 20
    # 'default_nav_through_poses_bt_xml' and 'default_nav_to_pose_bt_xml' are use defaults:
    # nav2_bt_navigator/navigate_to_pose_w_replanning_and_recovery.xml
    # nav2_bt_navigator/navigate_through_poses_w_replanning_and_recovery.xml
    # They can be set here or via a RewrittenYaml remap from a parent launch file to Nav2.
    plugin_lib_names:
    - nav2_compute_path_to_pose_action_bt_node
    - nav2_compute_path_through_poses_action_bt_node
    - nav2_smooth_path_action_bt_node
    - nav2_follow_path_action_bt_node
    - nav2_spin_action_bt_node
    - nav2_wait_action_bt_node
    - nav2_assisted_teleop_action_bt_node
    - nav2_back_up_action_bt_node
    - nav2_drive_on_heading_bt_node
    - nav2_clear_costmap_service_bt_node
    - nav2_is_stuck_condition_bt_node
    - nav2_goal_reached_condition_bt_node
    - nav2_goal_updated_condition_bt_node
    - nav2_globally_updated_goal_condition_bt_node
    - nav2_is_path_valid_condition_bt_node
    - nav2_initial_pose_received_condition_bt_node
    - nav2_reinitialize_global_localization_service_bt_node
    - nav2_rate_controller_bt_node
    - nav2_distance_controller_bt_node
    - nav2_speed_controller_bt_node
    - nav2_truncate_path_action_bt_node
    - nav2_truncate_path_local_action_bt_node
    - nav2_goal_updater_node_bt_node
    - nav2_recovery_node_bt_node
    - nav2_pipeline_sequence_bt_node
    - nav2_round_robin_node_bt_node
    - nav2_transform_available_condition_bt_node
    - nav2_time_expired_condition_bt_node
    - nav2_path_expiring_timer_condition
    - nav2_distance_traveled_condition_bt_node
    - nav2_single_trigger_bt_node
    - nav2_goal_updated_controller_bt_node
    - nav2_is_battery_low_condition_bt_node
    - nav2_navigate_through_poses_action_bt_node
    - nav2_navigate_to_pose_action_bt_node
    - nav2_remove_passed_goals_action_bt_node
    - nav2_planner_selector_bt_node
    - nav2_controller_selector_bt_node
    - nav2_goal_checker_selector_bt_node
    - nav2_controller_cancel_bt_node
    - nav2_path_longer_on_approach_bt_node
    - nav2_wait_cancel_bt_node
    - nav2_spin_cancel_bt_node
    - nav2_back_up_cancel_bt_node
    - nav2_assisted_teleop_cancel_bt_node
    - nav2_drive_on_heading_cancel_bt_node

bt_navigator_navigate_through_poses_rclcpp_node:
  ros__parameters:
    use_sim_time: True

bt_navigator_navigate_to_pose_rclcpp_node:
  ros__parameters:
    use_sim_time: True

controller_server:
  ros__parameters:
    use_sim_time: True
    controller_frequency: 30.0
    min_x_velocity_threshold: 0.001
    min_y_velocity_threshold: 0.5
    min_theta_velocity_threshold: 0.001
    failure_tolerance: 0.3
    progress_checker_plugin: "progress_checker"
    goal_checker_plugins: ["general_goal_checker"] # "precise_goal_checker"
    controller_plugins: ["FollowPath"]

    # Progress checker parameters
    progress_checker:
      plugin: "nav2_controller::SimpleProgressChecker"
      required_movement_radius: 0.5
      movement_time_allowance: 10.0
    # Goal checker parameters
    #precise_goal_checker:
    #  plugin: "nav2_controller::SimpleGoalChecker"
    #  xy_goal_tolerance: 0.25
    #  yaw_goal_tolerance: 0.25
    #  stateful: True
    general_goal_checker:
      stateful: True
      plugin: "nav2_controller::SimpleGoalChecker"
      xy_goal_tolerance: 0.25
      yaw_goal_tolerance: 0.25
    # DWB parameters
    FollowPath: #TODO configure
      plugin: "nav2_rotation_shim_controller::RotationShimController"
      primary_controller: "nav2_mppi_controller::MPPIController"
      angular_dist_threshold: 0.78
      forward_sampling_distance: 0.5
      rotate_to_heading_angular_vel: 0.8
      max_angular_accel: 1.6
      simulate_ahead_time: 1.0
      # Primary controller params:
      time_steps: 56
      model_dt: 0.05
      batch_size: 2000
      vx_std: 0.5
      vy_std: 0.0
      wz_std: 0.5
      vx_max: 0.7
      vx_min: 0.0
      vy_max: 0.0
      wz_max: 1.0
      iteration_count: 1
      prune_distance: 2.5
      transform_tolerance: 0.1
      temperature: 0.3
      gamma: 0.015
      motion_model: "DiffDrive"
      visualize: false
      TrajectoryVisualizer:
        trajectory_step: 10
        time_step: 5
      AckermannConstrains:
        min_turning_r: 0.2
      critics: ["ConstraintCritic", "ObstaclesCritic", "GoalCritic", "GoalAngleCritic", "PathAlignCritic", "PathFollowCritic", "PathAngleCritic", "PreferForwardCritic"]
      ConstraintCritic:
        enabled: true
        cost_power: 1
        cost_weight: 4.0
      GoalCritic:
        enabled: true
        cost_power: 1
        cost_weight: 5.0
        threshold_to_consider: 1.0
      GoalAngleCritic:
        enabled: true
        cost_power: 1
        cost_weight: 3.0
        threshold_to_consider: 0.4
      PreferForwardCritic:
        enabled: true
        cost_power: 1
        cost_weight: 5.0
        threshold_to_consider: 0.4
      ObstaclesCritic:
        enabled: true
        cost_power: 1
        repulsion_weight: 1.0
        critical_weight: 20.0
        consider_footprint: false
        collision_cost: 10000.0
        collision_margin_distance: 0.05
        cost_scaling_factor: 4.0
        inflation_radius: 2.5
        near_goal_distance: 0.5
      PathAlignCritic:
        enabled: true
        cost_power: 1
        cost_weight: 10.0
        max_path_occupancy_ratio: 0.05
        trajectory_point_step: 4
        threshold_to_consider: 0.40
        offset_from_furthest: 20
      PathFollowCritic:
        enabled: true
        cost_power: 1
        cost_weight: 5.0
        offset_from_furthest: 12 # When in doubt, prediction_horizon_s * max_speed / path_resolution / 3.0 is a good baseline
        threshold_to_consider: 0.4
      PathAngleCritic:
        enabled: true
        cost_power: 1
        cost_weight: 2.0
        offset_from_furthest: 12
        threshold_to_consider: 0.40
        max_angle_to_furthest: 1.4
      # TwirlingCritic:
      #   enabled: true
      #   twirling_cost_power: 1
      #   twirling_cost_weight: 10.0     
      

local_costmap:
  local_costmap:
    ros__parameters:
      update_frequency: 5.0
      publish_frequency: 2.0
      global_frame: odom
      robot_base_frame: base_link
      map_topic: /map
      use_sim_time: True
      rolling_window: true # Whether costmap should roll with robot base frame.
      width: 5
      height: 5
      resolution: 0.025
      footprint_padding: 0.05
      # robot_radius: 0.22
      footprint: "[ [0.55, 0.30], [0.55, -0.3], [-0.35, -0.30], [-0.35, 0.3] ]" # rb_theron footprint
      plugins: ["stvl_layer", "inflation_layer"]
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: True
        observation_sources: scan
        scan:
          topic: /front_laser/scan
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          data_type: "LaserScan"
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 4.0
        inflation_radius: 2.5
        enabled: true
        inflate_unknown: false
        inflate_around_unknown: false
      stvl_layer:
        plugin: "spatio_temporal_voxel_layer/SpatioTemporalVoxelLayer"
        enabled: true
        voxel_decay: 15.
        decay_model: 0
        voxel_size: 0.05
        track_unknown_space: true
        unknown_threshold: 15
        mark_threshold: 2
        update_footprint_enabled: true
        combination_method: 1
        origin_z: 0.0
        publish_voxel_map: false
        transform_tolerance: 0.2
        mapping_mode: false
        map_save_duration: 60.0
        observation_sources: lidar3d lidar2d
        lidar3d:
          data_type: PointCloud2
          topic: /bpearl_laser/scan/points
          marking: true
          clearing: true
          obstacle_range: 5.0
          min_obstacle_height: 0.1
          max_obstacle_height: 2.0
          expected_update_rate: 0.0
          observation_persistence: 0.0
          inf_is_valid: false
          filter: "voxel"
          voxel_min_points: 0
          clear_after_reading: true
          max_z: 7.0
          min_z: 0.1
          vertical_fov_angle: 3.14
          horizontal_fov_angle: 3.14
          decay_acceleration: 5.0
          model_type: 1
        lidar2d:
          data_type: LaserScan
          topic: /front_laser/scan
          marking: true
          clearing: true
          obstacle_range: 5.0
          min_obstacle_height: 0.1
          max_obstacle_height: 1.0
          expected_update_rate: 0.0
          observation_persistence: 0.0
          inf_is_valid: false
          filter: "voxel"
          voxel_min_points: 0
          clear_after_reading: true
          max_z: 1.0
          min_z: 0.1
          vertical_fov_angle: 0.01
          horizontal_fov_angle: 3.14
          decay_acceleration: 5.0
          model_type: 1
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_subscribe_transient_local: True
      always_send_full_costmap: True

global_costmap:
  global_costmap:
    ros__parameters:
      update_frequency: 1.0
      publish_frequency: 1.0
      global_frame: map
      robot_base_frame: base_link
      use_sim_time: True
      footprint_padding: 0.05
      footprint: "[ [0.55, 0.30], [0.55, -0.3], [-0.35, -0.30], [-0.35, 0.3] ]" # rb_theron footprint
      resolution: 0.05
      track_unknown_space: true
      plugins: ["static_layer", "stvl_layer", "inflation_layer"]
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: False
        observation_sources: scan
        scan:
          topic: /front_laser/scan
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          data_type: "LaserScan"
          raytrace_max_range: 3.0
          raytrace_min_range: 0.0
          obstacle_max_range: 2.5
          obstacle_min_range: 0.0
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_subscribe_transient_local: True
      stvl_layer:
        plugin: "spatio_temporal_voxel_layer/SpatioTemporalVoxelLayer"
        enabled: true
        voxel_decay: 5.0 # seconds if linear, e^n if exponential
        decay_model: 0 # 0=linear, 1=exponential, -1=persistent
        voxel_size: 0.05 # meters
        track_unknown_space: true # default space is known
        unknown_threshold: 15
        mark_threshold: 0 # voxel height
        update_footprint_enabled: true
        combination_method: 1 # 1=max, 0=override
        origin_z: 0.0
        publish_voxel_map: true
        transform_tolerance: 0.2
        mapping_mode: false
        map_save_duration: 60.0
        observation_sources: lidar2d_clearing lidar2d_marking lidar3d_clearing lidar3d_marking
        lidar3d_marking:
          enabled: true
          data_type: PointCloud2
          topic: /bpearl_laser/scan/points
          marking: true
          clearing: false
          obstacle_range: 15.0
          min_obstacle_height: 0.2
          max_obstacle_height: 1.8
          expected_update_rate: 0.0 # default 0, if not updating at this rate at least, remove from buffer
          observation_persistence: 0.0 # default 0, use all measurements taken during now-value, 0=latest
          inf_is_valid: false # default false, for laser scans
          filter: "voxel" # default passthrough, apply "voxel", "passthrough", or no filter to sensor data, recommend on
          voxel_min_points: 0
          clear_after_reading: true # default false, clear the buffer after the layer gets readings from it
          max_z: 2.0
          min_z: 0.3
          vertical_fov_angle: 3.14   # default 0.7, radians. For 3D lidars it's the symmetric FOV about the planar axis.
          vertical_fov_padding: 0.05    # 3D Lidar only. Default 0, in meters 
          horizontal_fov_angle: 3.14 # 3D lidar scanners like the VLP16 have 360 deg horizontal FOV.
          decay_acceleration: 0.0 # default 0, 1/s^2. If laser scanner MUST be 0
          model_type: 1 # default 0, model type for frustum. 0=depth camera, 1=3d lidar like VLP16 or similar
        lidar3d_clearing:
          enabled: true
          data_type: PointCloud2
          topic: /bpearl_laser/scan/points
          marking: false
          clearing: true
          obstacle_range: 15.0
          min_obstacle_height: 0.1
          max_obstacle_height: 1.9
          expected_update_rate: 0.0 # default 0, if not updating at this rate at least, remove from buffer
          observation_persistence: 0.0 # default 0, use all measurements taken during now-value, 0=latest
          inf_is_valid: false # default false, for laser scans
          filter: "voxel" # default passthrough, apply "voxel", "passthrough", or no filter to sensor data, recommend on
          voxel_min_points: 0
          clear_after_reading: true # default false, clear the buffer after the layer gets readings from it
          max_z: 2.0
          min_z: 0.3
          vertical_fov_angle: 3.14   # default 0.7, radians. For 3D lidars it's the symmetric FOV about the planar axis.
          vertical_fov_padding: 0.05    # 3D Lidar only. Default 0, in meters 
          horizontal_fov_angle: 3.14 # 3D lidar scanners like the VLP16 have 360 deg horizontal FOV.
          decay_acceleration: 0.0 # default 0, 1/s^2. If laser scanner MUST be 0
          model_type: 1 # default 0, model type for frustum. 0=depth camera, 1=3d lidar like VLP16 or similar
        lidar2d_marking:
          enabled: true
          data_type: LaserScan
          topic: /front_laser/scan
          marking: true
          clearing: false
          obstacle_range: 5.0
          min_obstacle_height: 0.1
          max_obstacle_height: 1.0
          expected_update_rate: 0.0
          observation_persistence: 0.0
          inf_is_valid: false
          filter: "voxel"
          voxel_min_points: 0
          clear_after_reading: true # default false, clear the buffer after the layer gets readings from it
          max_z: 1.0
          min_z: 0.1
          vertical_fov_angle: 0.01
          horizontal_fov_angle: 3.14
          decay_acceleration: 0.0
          model_type: 1
        lidar2d_clearing:
          enabled: true
          data_type: LaserScan
          topic: /front_laser/scan
          marking: false
          clearing: true
          obstacle_range: 5.0
          min_obstacle_height: 0.1
          max_obstacle_height: 1.0
          expected_update_rate: 0.0
          observation_persistence: 0.0
          inf_is_valid: false
          filter: "voxel"
          voxel_min_points: 0
          clear_after_reading: true # default false, clear the buffer after the layer gets readings from it
          max_z: 1.0
          min_z: 0.1
          vertical_fov_angle: 0.01
          horizontal_fov_angle: 3.14
          decay_acceleration: 0.0
          model_type: 1      
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 4.0
        inflation_radius: 2.5
        enabled: true
        inflate_unknown: false
        inflate_around_unknown: false
      always_send_full_costmap: True

planner_server:
  ros__parameters:
    expected_planner_frequency: 20.0
    use_sim_time: True
    planner_plugins: ["GridBased"]
    GridBased:
      plugin: "nav2_navfn_planner/NavfnPlanner"
      tolerance: 0.5
      use_astar: false
      allow_unknown: true

smoother_server:
  ros__parameters:
    use_sim_time: True
    smoother_plugins: ["simple_smoother"]
    simple_smoother:
      plugin: "nav2_smoother::SimpleSmoother"
      tolerance: 1.0e-10
      max_its: 1000
      do_refinement: True

behavior_server:
  ros__parameters:
    costmap_topic: local_costmap/costmap_raw
    footprint_topic: local_costmap/published_footprint
    cycle_frequency: 10.0
    behavior_plugins: ["spin", "backup", "drive_on_heading", "assisted_teleop", "wait"]
    spin:
      plugin: "nav2_behaviors/Spin"
    backup:
      plugin: "nav2_behaviors/BackUp"
    drive_on_heading:
      plugin: "nav2_behaviors/DriveOnHeading"
    wait:
      plugin: "nav2_behaviors/Wait"
    assisted_teleop:
      plugin: "nav2_behaviors/AssistedTeleop"
    global_frame: odom
    robot_base_frame: base_link
    transform_tolerance: 0.1
    use_sim_time: true
    simulate_ahead_time: 2.0
    max_rotational_vel: 1.0
    min_rotational_vel: 0.4
    rotational_acc_lim: 3.2

robot_state_publisher:
  ros__parameters:
    use_sim_time: True

waypoint_follower:
  ros__parameters:
    use_sim_time: True
    loop_rate: 20
    stop_on_failure: false
    waypoint_task_executor_plugin: "wait_at_waypoint"
    wait_at_waypoint:
      plugin: "nav2_waypoint_follower::WaitAtWaypoint"
      enabled: True
      waypoint_pause_duration: 200

velocity_smoother: #TODO check parameters
  ros__parameters:
    use_sim_time: true
    smoothing_frequency: 20.0
    scale_velocities: false
    feedback: "OPEN_LOOP"
    max_velocity: [1.00, 0.0, 1.0]
    min_velocity: [-0.1, 0.0, -1.0]
    max_accel: [2.0, 0.0, 2.5]
    max_decel: [-2.0, 0.0, -2.5]
    odom_topic: "odom"
    odom_duration: 0.1
    deadband_velocity: [0.0, 0.0, 0.0]
    velocity_timeout: 1.0