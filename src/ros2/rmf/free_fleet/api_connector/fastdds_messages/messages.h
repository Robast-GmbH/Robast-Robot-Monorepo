// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file messages.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _FAST_DDS_GENERATED_MESSAGES_H_
#define _FAST_DDS_GENERATED_MESSAGES_H_


#include <fastrtps/utils/fixed_size_string.hpp>

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(MESSAGES_SOURCE)
#define MESSAGES_DllAPI __declspec( dllexport )
#else
#define MESSAGES_DllAPI __declspec( dllimport )
#endif // MESSAGES_SOURCE
#else
#define MESSAGES_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define MESSAGES_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
} // namespace fastcdr
} // namespace eprosima


/*!
 * @brief This class represents the structure RobotMode defined by the user in the IDL file.
 * @ingroup messages
 */
class RobotMode
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport RobotMode();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~RobotMode();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object RobotMode that will be copied.
     */
    eProsima_user_DllExport RobotMode(
            const RobotMode& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object RobotMode that will be copied.
     */
    eProsima_user_DllExport RobotMode(
            RobotMode&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object RobotMode that will be copied.
     */
    eProsima_user_DllExport RobotMode& operator =(
            const RobotMode& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object RobotMode that will be copied.
     */
    eProsima_user_DllExport RobotMode& operator =(
            RobotMode&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x RobotMode object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const RobotMode& x) const;

    /*!
     * @brief Comparison operator.
     * @param x RobotMode object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const RobotMode& x) const;

    /*!
     * @brief This function sets a value in member mode
     * @param _mode New value for member mode
     */
    eProsima_user_DllExport void mode(
            uint32_t _mode);

    /*!
     * @brief This function returns the value of member mode
     * @return Value of member mode
     */
    eProsima_user_DllExport uint32_t mode() const;

    /*!
     * @brief This function returns a reference to member mode
     * @return Reference to member mode
     */
    eProsima_user_DllExport uint32_t& mode();


    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const RobotMode& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    uint32_t m_mode;

};
/*!
 * @brief This class represents the structure Poi defined by the user in the IDL file.
 * @ingroup messages
 */
class Poi
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport Poi();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Poi();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Poi that will be copied.
     */
    eProsima_user_DllExport Poi(
            const Poi& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Poi that will be copied.
     */
    eProsima_user_DllExport Poi(
            Poi&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Poi that will be copied.
     */
    eProsima_user_DllExport Poi& operator =(
            const Poi& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object Poi that will be copied.
     */
    eProsima_user_DllExport Poi& operator =(
            Poi&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x Poi object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const Poi& x) const;

    /*!
     * @brief Comparison operator.
     * @param x Poi object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const Poi& x) const;

    /*!
     * @brief This function sets a value in member sec
     * @param _sec New value for member sec
     */
    eProsima_user_DllExport void sec(
            uint32_t _sec);

    /*!
     * @brief This function returns the value of member sec
     * @return Value of member sec
     */
    eProsima_user_DllExport uint32_t sec() const;

    /*!
     * @brief This function returns a reference to member sec
     * @return Reference to member sec
     */
    eProsima_user_DllExport uint32_t& sec();

    /*!
     * @brief This function sets a value in member nanosec
     * @param _nanosec New value for member nanosec
     */
    eProsima_user_DllExport void nanosec(
            uint32_t _nanosec);

    /*!
     * @brief This function returns the value of member nanosec
     * @return Value of member nanosec
     */
    eProsima_user_DllExport uint32_t nanosec() const;

    /*!
     * @brief This function returns a reference to member nanosec
     * @return Reference to member nanosec
     */
    eProsima_user_DllExport uint32_t& nanosec();

    /*!
     * @brief This function sets a value in member x
     * @param _x New value for member x
     */
    eProsima_user_DllExport void x(
            float _x);

    /*!
     * @brief This function returns the value of member x
     * @return Value of member x
     */
    eProsima_user_DllExport float x() const;

    /*!
     * @brief This function returns a reference to member x
     * @return Reference to member x
     */
    eProsima_user_DllExport float& x();

    /*!
     * @brief This function sets a value in member y
     * @param _y New value for member y
     */
    eProsima_user_DllExport void y(
            float _y);

    /*!
     * @brief This function returns the value of member y
     * @return Value of member y
     */
    eProsima_user_DllExport float y() const;

    /*!
     * @brief This function returns a reference to member y
     * @return Reference to member y
     */
    eProsima_user_DllExport float& y();

    /*!
     * @brief This function sets a value in member yaw
     * @param _yaw New value for member yaw
     */
    eProsima_user_DllExport void yaw(
            float _yaw);

    /*!
     * @brief This function returns the value of member yaw
     * @return Value of member yaw
     */
    eProsima_user_DllExport float yaw() const;

    /*!
     * @brief This function returns a reference to member yaw
     * @return Reference to member yaw
     */
    eProsima_user_DllExport float& yaw();

    /*!
     * @brief This function copies the value in member level_name
     * @param _level_name New value to be copied in member level_name
     */
    eProsima_user_DllExport void level_name(
            const std::string& _level_name);

    /*!
     * @brief This function moves the value in member level_name
     * @param _level_name New value to be moved in member level_name
     */
    eProsima_user_DllExport void level_name(
            std::string&& _level_name);

    /*!
     * @brief This function returns a constant reference to member level_name
     * @return Constant reference to member level_name
     */
    eProsima_user_DllExport const std::string& level_name() const;

    /*!
     * @brief This function returns a reference to member level_name
     * @return Reference to member level_name
     */
    eProsima_user_DllExport std::string& level_name();

    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const Poi& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    uint32_t m_sec;
    uint32_t m_nanosec;
    float m_x;
    float m_y;
    float m_yaw;
    std::string m_level_name;

};
/*!
 * @brief This class represents the structure RobotState defined by the user in the IDL file.
 * @ingroup messages
 */
class RobotState
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport RobotState();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~RobotState();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object RobotState that will be copied.
     */
    eProsima_user_DllExport RobotState(
            const RobotState& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object RobotState that will be copied.
     */
    eProsima_user_DllExport RobotState(
            RobotState&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object RobotState that will be copied.
     */
    eProsima_user_DllExport RobotState& operator =(
            const RobotState& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object RobotState that will be copied.
     */
    eProsima_user_DllExport RobotState& operator =(
            RobotState&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x RobotState object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const RobotState& x) const;

    /*!
     * @brief Comparison operator.
     * @param x RobotState object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const RobotState& x) const;

    /*!
     * @brief This function copies the value in member name
     * @param _name New value to be copied in member name
     */
    eProsima_user_DllExport void name(
            const std::string& _name);

    /*!
     * @brief This function moves the value in member name
     * @param _name New value to be moved in member name
     */
    eProsima_user_DllExport void name(
            std::string&& _name);

    /*!
     * @brief This function returns a constant reference to member name
     * @return Constant reference to member name
     */
    eProsima_user_DllExport const std::string& name() const;

    /*!
     * @brief This function returns a reference to member name
     * @return Reference to member name
     */
    eProsima_user_DllExport std::string& name();
    /*!
     * @brief This function copies the value in member model
     * @param _model New value to be copied in member model
     */
    eProsima_user_DllExport void model(
            const std::string& _model);

    /*!
     * @brief This function moves the value in member model
     * @param _model New value to be moved in member model
     */
    eProsima_user_DllExport void model(
            std::string&& _model);

    /*!
     * @brief This function returns a constant reference to member model
     * @return Constant reference to member model
     */
    eProsima_user_DllExport const std::string& model() const;

    /*!
     * @brief This function returns a reference to member model
     * @return Reference to member model
     */
    eProsima_user_DllExport std::string& model();
    /*!
     * @brief This function copies the value in member task_id
     * @param _task_id New value to be copied in member task_id
     */
    eProsima_user_DllExport void task_id(
            const std::string& _task_id);

    /*!
     * @brief This function moves the value in member task_id
     * @param _task_id New value to be moved in member task_id
     */
    eProsima_user_DllExport void task_id(
            std::string&& _task_id);

    /*!
     * @brief This function returns a constant reference to member task_id
     * @return Constant reference to member task_id
     */
    eProsima_user_DllExport const std::string& task_id() const;

    /*!
     * @brief This function returns a reference to member task_id
     * @return Reference to member task_id
     */
    eProsima_user_DllExport std::string& task_id();
    /*!
     * @brief This function copies the value in member mode
     * @param _mode New value to be copied in member mode
     */
    eProsima_user_DllExport void mode(
            const RobotMode& _mode);

    /*!
     * @brief This function moves the value in member mode
     * @param _mode New value to be moved in member mode
     */
    eProsima_user_DllExport void mode(
            RobotMode&& _mode);

    /*!
     * @brief This function returns a constant reference to member mode
     * @return Constant reference to member mode
     */
    eProsima_user_DllExport const RobotMode& mode() const;

    /*!
     * @brief This function returns a reference to member mode
     * @return Reference to member mode
     */
    eProsima_user_DllExport RobotMode& mode();
    /*!
     * @brief This function sets a value in member battery_percent
     * @param _battery_percent New value for member battery_percent
     */
    eProsima_user_DllExport void battery_percent(
            float _battery_percent);

    /*!
     * @brief This function returns the value of member battery_percent
     * @return Value of member battery_percent
     */
    eProsima_user_DllExport float battery_percent() const;

    /*!
     * @brief This function returns a reference to member battery_percent
     * @return Reference to member battery_percent
     */
    eProsima_user_DllExport float& battery_percent();

    /*!
     * @brief This function copies the value in member location
     * @param _location New value to be copied in member location
     */
    eProsima_user_DllExport void location(
            const Poi& _location);

    /*!
     * @brief This function moves the value in member location
     * @param _location New value to be moved in member location
     */
    eProsima_user_DllExport void location(
            Poi&& _location);

    /*!
     * @brief This function returns a constant reference to member location
     * @return Constant reference to member location
     */
    eProsima_user_DllExport const Poi& location() const;

    /*!
     * @brief This function returns a reference to member location
     * @return Reference to member location
     */
    eProsima_user_DllExport Poi& location();
    /*!
     * @brief This function copies the value in member path
     * @param _path New value to be copied in member path
     */
    eProsima_user_DllExport void path(
            const std::vector<Poi>& _path);

    /*!
     * @brief This function moves the value in member path
     * @param _path New value to be moved in member path
     */
    eProsima_user_DllExport void path(
            std::vector<Poi>&& _path);

    /*!
     * @brief This function returns a constant reference to member path
     * @return Constant reference to member path
     */
    eProsima_user_DllExport const std::vector<Poi>& path() const;

    /*!
     * @brief This function returns a reference to member path
     * @return Reference to member path
     */
    eProsima_user_DllExport std::vector<Poi>& path();

    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const RobotState& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    std::string m_name;
    std::string m_model;
    std::string m_task_id;
    RobotMode m_mode;
    float m_battery_percent;
    Poi m_location;
    std::vector<Poi> m_path;

};
/*!
 * @brief This class represents the structure ModeParameter defined by the user in the IDL file.
 * @ingroup messages
 */
class ModeParameter
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport ModeParameter();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~ModeParameter();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object ModeParameter that will be copied.
     */
    eProsima_user_DllExport ModeParameter(
            const ModeParameter& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object ModeParameter that will be copied.
     */
    eProsima_user_DllExport ModeParameter(
            ModeParameter&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object ModeParameter that will be copied.
     */
    eProsima_user_DllExport ModeParameter& operator =(
            const ModeParameter& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object ModeParameter that will be copied.
     */
    eProsima_user_DllExport ModeParameter& operator =(
            ModeParameter&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x ModeParameter object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const ModeParameter& x) const;

    /*!
     * @brief Comparison operator.
     * @param x ModeParameter object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const ModeParameter& x) const;

    /*!
     * @brief This function copies the value in member name
     * @param _name New value to be copied in member name
     */
    eProsima_user_DllExport void name(
            const std::string& _name);

    /*!
     * @brief This function moves the value in member name
     * @param _name New value to be moved in member name
     */
    eProsima_user_DllExport void name(
            std::string&& _name);

    /*!
     * @brief This function returns a constant reference to member name
     * @return Constant reference to member name
     */
    eProsima_user_DllExport const std::string& name() const;

    /*!
     * @brief This function returns a reference to member name
     * @return Reference to member name
     */
    eProsima_user_DllExport std::string& name();
    /*!
     * @brief This function copies the value in member value
     * @param _value New value to be copied in member value
     */
    eProsima_user_DllExport void value(
            const std::string& _value);

    /*!
     * @brief This function moves the value in member value
     * @param _value New value to be moved in member value
     */
    eProsima_user_DllExport void value(
            std::string&& _value);

    /*!
     * @brief This function returns a constant reference to member value
     * @return Constant reference to member value
     */
    eProsima_user_DllExport const std::string& value() const;

    /*!
     * @brief This function returns a reference to member value
     * @return Reference to member value
     */
    eProsima_user_DllExport std::string& value();

    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const ModeParameter& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    std::string m_name;
    std::string m_value;

};
/*!
 * @brief This class represents the structure ModeRequest defined by the user in the IDL file.
 * @ingroup messages
 */
class ModeRequest
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport ModeRequest();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~ModeRequest();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object ModeRequest that will be copied.
     */
    eProsima_user_DllExport ModeRequest(
            const ModeRequest& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object ModeRequest that will be copied.
     */
    eProsima_user_DllExport ModeRequest(
            ModeRequest&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object ModeRequest that will be copied.
     */
    eProsima_user_DllExport ModeRequest& operator =(
            const ModeRequest& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object ModeRequest that will be copied.
     */
    eProsima_user_DllExport ModeRequest& operator =(
            ModeRequest&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x ModeRequest object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const ModeRequest& x) const;

    /*!
     * @brief Comparison operator.
     * @param x ModeRequest object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const ModeRequest& x) const;

    /*!
     * @brief This function copies the value in member fleet_name
     * @param _fleet_name New value to be copied in member fleet_name
     */
    eProsima_user_DllExport void fleet_name(
            const std::string& _fleet_name);

    /*!
     * @brief This function moves the value in member fleet_name
     * @param _fleet_name New value to be moved in member fleet_name
     */
    eProsima_user_DllExport void fleet_name(
            std::string&& _fleet_name);

    /*!
     * @brief This function returns a constant reference to member fleet_name
     * @return Constant reference to member fleet_name
     */
    eProsima_user_DllExport const std::string& fleet_name() const;

    /*!
     * @brief This function returns a reference to member fleet_name
     * @return Reference to member fleet_name
     */
    eProsima_user_DllExport std::string& fleet_name();
    /*!
     * @brief This function copies the value in member robot_name
     * @param _robot_name New value to be copied in member robot_name
     */
    eProsima_user_DllExport void robot_name(
            const std::string& _robot_name);

    /*!
     * @brief This function moves the value in member robot_name
     * @param _robot_name New value to be moved in member robot_name
     */
    eProsima_user_DllExport void robot_name(
            std::string&& _robot_name);

    /*!
     * @brief This function returns a constant reference to member robot_name
     * @return Constant reference to member robot_name
     */
    eProsima_user_DllExport const std::string& robot_name() const;

    /*!
     * @brief This function returns a reference to member robot_name
     * @return Reference to member robot_name
     */
    eProsima_user_DllExport std::string& robot_name();
    /*!
     * @brief This function copies the value in member mode
     * @param _mode New value to be copied in member mode
     */
    eProsima_user_DllExport void mode(
            const RobotMode& _mode);

    /*!
     * @brief This function moves the value in member mode
     * @param _mode New value to be moved in member mode
     */
    eProsima_user_DllExport void mode(
            RobotMode&& _mode);

    /*!
     * @brief This function returns a constant reference to member mode
     * @return Constant reference to member mode
     */
    eProsima_user_DllExport const RobotMode& mode() const;

    /*!
     * @brief This function returns a reference to member mode
     * @return Reference to member mode
     */
    eProsima_user_DllExport RobotMode& mode();
    /*!
     * @brief This function copies the value in member task_id
     * @param _task_id New value to be copied in member task_id
     */
    eProsima_user_DllExport void task_id(
            const std::string& _task_id);

    /*!
     * @brief This function moves the value in member task_id
     * @param _task_id New value to be moved in member task_id
     */
    eProsima_user_DllExport void task_id(
            std::string&& _task_id);

    /*!
     * @brief This function returns a constant reference to member task_id
     * @return Constant reference to member task_id
     */
    eProsima_user_DllExport const std::string& task_id() const;

    /*!
     * @brief This function returns a reference to member task_id
     * @return Reference to member task_id
     */
    eProsima_user_DllExport std::string& task_id();
    /*!
     * @brief This function copies the value in member parameters
     * @param _parameters New value to be copied in member parameters
     */
    eProsima_user_DllExport void parameters(
            const ModeParameter& _parameters);

    /*!
     * @brief This function moves the value in member parameters
     * @param _parameters New value to be moved in member parameters
     */
    eProsima_user_DllExport void parameters(
            ModeParameter&& _parameters);

    /*!
     * @brief This function returns a constant reference to member parameters
     * @return Constant reference to member parameters
     */
    eProsima_user_DllExport const ModeParameter& parameters() const;

    /*!
     * @brief This function returns a reference to member parameters
     * @return Reference to member parameters
     */
    eProsima_user_DllExport ModeParameter& parameters();

    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const ModeRequest& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    std::string m_fleet_name;
    std::string m_robot_name;
    RobotMode m_mode;
    std::string m_task_id;
    ModeParameter m_parameters;

};
/*!
 * @brief This class represents the structure PathRequest defined by the user in the IDL file.
 * @ingroup messages
 */
class PathRequest
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport PathRequest();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~PathRequest();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object PathRequest that will be copied.
     */
    eProsima_user_DllExport PathRequest(
            const PathRequest& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object PathRequest that will be copied.
     */
    eProsima_user_DllExport PathRequest(
            PathRequest&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object PathRequest that will be copied.
     */
    eProsima_user_DllExport PathRequest& operator =(
            const PathRequest& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object PathRequest that will be copied.
     */
    eProsima_user_DllExport PathRequest& operator =(
            PathRequest&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x PathRequest object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const PathRequest& x) const;

    /*!
     * @brief Comparison operator.
     * @param x PathRequest object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const PathRequest& x) const;

    /*!
     * @brief This function copies the value in member fleet_name
     * @param _fleet_name New value to be copied in member fleet_name
     */
    eProsima_user_DllExport void fleet_name(
            const std::string& _fleet_name);

    /*!
     * @brief This function moves the value in member fleet_name
     * @param _fleet_name New value to be moved in member fleet_name
     */
    eProsima_user_DllExport void fleet_name(
            std::string&& _fleet_name);

    /*!
     * @brief This function returns a constant reference to member fleet_name
     * @return Constant reference to member fleet_name
     */
    eProsima_user_DllExport const std::string& fleet_name() const;

    /*!
     * @brief This function returns a reference to member fleet_name
     * @return Reference to member fleet_name
     */
    eProsima_user_DllExport std::string& fleet_name();
    /*!
     * @brief This function copies the value in member robot_name
     * @param _robot_name New value to be copied in member robot_name
     */
    eProsima_user_DllExport void robot_name(
            const std::string& _robot_name);

    /*!
     * @brief This function moves the value in member robot_name
     * @param _robot_name New value to be moved in member robot_name
     */
    eProsima_user_DllExport void robot_name(
            std::string&& _robot_name);

    /*!
     * @brief This function returns a constant reference to member robot_name
     * @return Constant reference to member robot_name
     */
    eProsima_user_DllExport const std::string& robot_name() const;

    /*!
     * @brief This function returns a reference to member robot_name
     * @return Reference to member robot_name
     */
    eProsima_user_DllExport std::string& robot_name();
    /*!
     * @brief This function copies the value in member path
     * @param _path New value to be copied in member path
     */
    eProsima_user_DllExport void path(
            const std::vector<Poi>& _path);

    /*!
     * @brief This function moves the value in member path
     * @param _path New value to be moved in member path
     */
    eProsima_user_DllExport void path(
            std::vector<Poi>&& _path);

    /*!
     * @brief This function returns a constant reference to member path
     * @return Constant reference to member path
     */
    eProsima_user_DllExport const std::vector<Poi>& path() const;

    /*!
     * @brief This function returns a reference to member path
     * @return Reference to member path
     */
    eProsima_user_DllExport std::vector<Poi>& path();
    /*!
     * @brief This function copies the value in member task_id
     * @param _task_id New value to be copied in member task_id
     */
    eProsima_user_DllExport void task_id(
            const std::string& _task_id);

    /*!
     * @brief This function moves the value in member task_id
     * @param _task_id New value to be moved in member task_id
     */
    eProsima_user_DllExport void task_id(
            std::string&& _task_id);

    /*!
     * @brief This function returns a constant reference to member task_id
     * @return Constant reference to member task_id
     */
    eProsima_user_DllExport const std::string& task_id() const;

    /*!
     * @brief This function returns a reference to member task_id
     * @return Reference to member task_id
     */
    eProsima_user_DllExport std::string& task_id();

    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const PathRequest& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    std::string m_fleet_name;
    std::string m_robot_name;
    std::vector<Poi> m_path;
    std::string m_task_id;

};
/*!
 * @brief This class represents the structure DestinationRequest defined by the user in the IDL file.
 * @ingroup messages
 */
class DestinationRequest
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport DestinationRequest();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~DestinationRequest();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object DestinationRequest that will be copied.
     */
    eProsima_user_DllExport DestinationRequest(
            const DestinationRequest& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object DestinationRequest that will be copied.
     */
    eProsima_user_DllExport DestinationRequest(
            DestinationRequest&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object DestinationRequest that will be copied.
     */
    eProsima_user_DllExport DestinationRequest& operator =(
            const DestinationRequest& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object DestinationRequest that will be copied.
     */
    eProsima_user_DllExport DestinationRequest& operator =(
            DestinationRequest&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x DestinationRequest object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const DestinationRequest& x) const;

    /*!
     * @brief Comparison operator.
     * @param x DestinationRequest object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const DestinationRequest& x) const;

    /*!
     * @brief This function copies the value in member fleet_name
     * @param _fleet_name New value to be copied in member fleet_name
     */
    eProsima_user_DllExport void fleet_name(
            const std::string& _fleet_name);

    /*!
     * @brief This function moves the value in member fleet_name
     * @param _fleet_name New value to be moved in member fleet_name
     */
    eProsima_user_DllExport void fleet_name(
            std::string&& _fleet_name);

    /*!
     * @brief This function returns a constant reference to member fleet_name
     * @return Constant reference to member fleet_name
     */
    eProsima_user_DllExport const std::string& fleet_name() const;

    /*!
     * @brief This function returns a reference to member fleet_name
     * @return Reference to member fleet_name
     */
    eProsima_user_DllExport std::string& fleet_name();
    /*!
     * @brief This function copies the value in member robot_name
     * @param _robot_name New value to be copied in member robot_name
     */
    eProsima_user_DllExport void robot_name(
            const std::string& _robot_name);

    /*!
     * @brief This function moves the value in member robot_name
     * @param _robot_name New value to be moved in member robot_name
     */
    eProsima_user_DllExport void robot_name(
            std::string&& _robot_name);

    /*!
     * @brief This function returns a constant reference to member robot_name
     * @return Constant reference to member robot_name
     */
    eProsima_user_DllExport const std::string& robot_name() const;

    /*!
     * @brief This function returns a reference to member robot_name
     * @return Reference to member robot_name
     */
    eProsima_user_DllExport std::string& robot_name();
    /*!
     * @brief This function copies the value in member destination
     * @param _destination New value to be copied in member destination
     */
    eProsima_user_DllExport void destination(
            const Poi& _destination);

    /*!
     * @brief This function moves the value in member destination
     * @param _destination New value to be moved in member destination
     */
    eProsima_user_DllExport void destination(
            Poi&& _destination);

    /*!
     * @brief This function returns a constant reference to member destination
     * @return Constant reference to member destination
     */
    eProsima_user_DllExport const Poi& destination() const;

    /*!
     * @brief This function returns a reference to member destination
     * @return Reference to member destination
     */
    eProsima_user_DllExport Poi& destination();
    /*!
     * @brief This function copies the value in member task_id
     * @param _task_id New value to be copied in member task_id
     */
    eProsima_user_DllExport void task_id(
            const std::string& _task_id);

    /*!
     * @brief This function moves the value in member task_id
     * @param _task_id New value to be moved in member task_id
     */
    eProsima_user_DllExport void task_id(
            std::string&& _task_id);

    /*!
     * @brief This function returns a constant reference to member task_id
     * @return Constant reference to member task_id
     */
    eProsima_user_DllExport const std::string& task_id() const;

    /*!
     * @brief This function returns a reference to member task_id
     * @return Reference to member task_id
     */
    eProsima_user_DllExport std::string& task_id();

    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const DestinationRequest& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    std::string m_fleet_name;
    std::string m_robot_name;
    Poi m_destination;
    std::string m_task_id;

};
/*!
 * @brief This class represents the structure OpenDrawerRequest defined by the user in the IDL file.
 * @ingroup messages
 */
class OpenDrawerRequest
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport OpenDrawerRequest();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~OpenDrawerRequest();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object OpenDrawerRequest that will be copied.
     */
    eProsima_user_DllExport OpenDrawerRequest(
            const OpenDrawerRequest& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object OpenDrawerRequest that will be copied.
     */
    eProsima_user_DllExport OpenDrawerRequest(
            OpenDrawerRequest&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object OpenDrawerRequest that will be copied.
     */
    eProsima_user_DllExport OpenDrawerRequest& operator =(
            const OpenDrawerRequest& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object OpenDrawerRequest that will be copied.
     */
    eProsima_user_DllExport OpenDrawerRequest& operator =(
            OpenDrawerRequest&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x OpenDrawerRequest object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const OpenDrawerRequest& x) const;

    /*!
     * @brief Comparison operator.
     * @param x OpenDrawerRequest object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const OpenDrawerRequest& x) const;

    /*!
     * @brief This function copies the value in member fleet_name
     * @param _fleet_name New value to be copied in member fleet_name
     */
    eProsima_user_DllExport void fleet_name(
            const std::string& _fleet_name);

    /*!
     * @brief This function moves the value in member fleet_name
     * @param _fleet_name New value to be moved in member fleet_name
     */
    eProsima_user_DllExport void fleet_name(
            std::string&& _fleet_name);

    /*!
     * @brief This function returns a constant reference to member fleet_name
     * @return Constant reference to member fleet_name
     */
    eProsima_user_DllExport const std::string& fleet_name() const;

    /*!
     * @brief This function returns a reference to member fleet_name
     * @return Reference to member fleet_name
     */
    eProsima_user_DllExport std::string& fleet_name();
    /*!
     * @brief This function copies the value in member robot_name
     * @param _robot_name New value to be copied in member robot_name
     */
    eProsima_user_DllExport void robot_name(
            const std::string& _robot_name);

    /*!
     * @brief This function moves the value in member robot_name
     * @param _robot_name New value to be moved in member robot_name
     */
    eProsima_user_DllExport void robot_name(
            std::string&& _robot_name);

    /*!
     * @brief This function returns a constant reference to member robot_name
     * @return Constant reference to member robot_name
     */
    eProsima_user_DllExport const std::string& robot_name() const;

    /*!
     * @brief This function returns a reference to member robot_name
     * @return Reference to member robot_name
     */
    eProsima_user_DllExport std::string& robot_name();
    /*!
     * @brief This function sets a value in member module_id
     * @param _module_id New value for member module_id
     */
    eProsima_user_DllExport void module_id(
            int16_t _module_id);

    /*!
     * @brief This function returns the value of member module_id
     * @return Value of member module_id
     */
    eProsima_user_DllExport int16_t module_id() const;

    /*!
     * @brief This function returns a reference to member module_id
     * @return Reference to member module_id
     */
    eProsima_user_DllExport int16_t& module_id();

    /*!
     * @brief This function sets a value in member drawer_id
     * @param _drawer_id New value for member drawer_id
     */
    eProsima_user_DllExport void drawer_id(
            int16_t _drawer_id);

    /*!
     * @brief This function returns the value of member drawer_id
     * @return Value of member drawer_id
     */
    eProsima_user_DllExport int16_t drawer_id() const;

    /*!
     * @brief This function returns a reference to member drawer_id
     * @return Reference to member drawer_id
     */
    eProsima_user_DllExport int16_t& drawer_id();

    /*!
     * @brief This function sets a value in member e_drawer
     * @param _e_drawer New value for member e_drawer
     */
    eProsima_user_DllExport void e_drawer(
            bool _e_drawer);

    /*!
     * @brief This function returns the value of member e_drawer
     * @return Value of member e_drawer
     */
    eProsima_user_DllExport bool e_drawer() const;

    /*!
     * @brief This function returns a reference to member e_drawer
     * @return Reference to member e_drawer
     */
    eProsima_user_DllExport bool& e_drawer();


    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const OpenDrawerRequest& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    std::string m_fleet_name;
    std::string m_robot_name;
    int16_t m_module_id;
    int16_t m_drawer_id;
    bool m_e_drawer;

};

#endif // _FAST_DDS_GENERATED_MESSAGES_H_

