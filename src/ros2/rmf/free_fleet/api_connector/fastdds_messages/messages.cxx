// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file messages.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "messages.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

#define DestinationRequest_max_cdr_typesize 1060ULL;
#define RobotState_max_cdr_typesize 29072ULL;
#define PathRequest_max_cdr_typesize 28784ULL;
#define ModeRequest_max_cdr_typesize 1304ULL;
#define OpenDrawerRequest_max_cdr_typesize 525ULL;
#define ModeParameter_max_cdr_typesize 520ULL;
#define Poi_max_cdr_typesize 280ULL;
#define RobotMode_max_cdr_typesize 4ULL;
#define DestinationRequest_max_key_cdr_typesize 0ULL;
#define RobotState_max_key_cdr_typesize 0ULL;
#define PathRequest_max_key_cdr_typesize 0ULL;
#define ModeRequest_max_key_cdr_typesize 0ULL;
#define OpenDrawerRequest_max_key_cdr_typesize 0ULL;
#define ModeParameter_max_key_cdr_typesize 0ULL;
#define Poi_max_key_cdr_typesize 0ULL;
#define RobotMode_max_key_cdr_typesize 0ULL;

RobotMode::RobotMode()
{
    // unsigned long m_mode
    m_mode = 0;

}

RobotMode::~RobotMode()
{
}

RobotMode::RobotMode(
        const RobotMode& x)
{
    m_mode = x.m_mode;
}

RobotMode::RobotMode(
        RobotMode&& x) noexcept 
{
    m_mode = x.m_mode;
}

RobotMode& RobotMode::operator =(
        const RobotMode& x)
{

    m_mode = x.m_mode;

    return *this;
}

RobotMode& RobotMode::operator =(
        RobotMode&& x) noexcept
{

    m_mode = x.m_mode;

    return *this;
}

bool RobotMode::operator ==(
        const RobotMode& x) const
{

    return (m_mode == x.m_mode);
}

bool RobotMode::operator !=(
        const RobotMode& x) const
{
    return !(*this == x);
}

size_t RobotMode::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return RobotMode_max_cdr_typesize;
}

size_t RobotMode::getCdrSerializedSize(
        const RobotMode& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    return current_alignment - initial_alignment;
}

void RobotMode::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_mode;
}

void RobotMode::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_mode;
}

/*!
 * @brief This function sets a value in member mode
 * @param _mode New value for member mode
 */
void RobotMode::mode(
        uint32_t _mode)
{
    m_mode = _mode;
}

/*!
 * @brief This function returns the value of member mode
 * @return Value of member mode
 */
uint32_t RobotMode::mode() const
{
    return m_mode;
}

/*!
 * @brief This function returns a reference to member mode
 * @return Reference to member mode
 */
uint32_t& RobotMode::mode()
{
    return m_mode;
}



size_t RobotMode::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return RobotMode_max_key_cdr_typesize;
}

bool RobotMode::isKeyDefined()
{
    return false;
}

void RobotMode::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


Poi::Poi()
{
    // unsigned long m_sec
    m_sec = 0;
    // unsigned long m_nanosec
    m_nanosec = 0;
    // float m_x
    m_x = 0.0;
    // float m_y
    m_y = 0.0;
    // float m_yaw
    m_yaw = 0.0;
    // string m_level_name
    m_level_name = "";


}

Poi::~Poi()
{






}

Poi::Poi(
        const Poi& x)
{
    m_sec = x.m_sec;
    m_nanosec = x.m_nanosec;
    m_x = x.m_x;
    m_y = x.m_y;
    m_yaw = x.m_yaw;
    m_level_name = x.m_level_name;
}

Poi::Poi(
        Poi&& x) noexcept 
{
    m_sec = x.m_sec;
    m_nanosec = x.m_nanosec;
    m_x = x.m_x;
    m_y = x.m_y;
    m_yaw = x.m_yaw;
    m_level_name = std::move(x.m_level_name);
}

Poi& Poi::operator =(
        const Poi& x)
{

    m_sec = x.m_sec;
    m_nanosec = x.m_nanosec;
    m_x = x.m_x;
    m_y = x.m_y;
    m_yaw = x.m_yaw;
    m_level_name = x.m_level_name;

    return *this;
}

Poi& Poi::operator =(
        Poi&& x) noexcept
{

    m_sec = x.m_sec;
    m_nanosec = x.m_nanosec;
    m_x = x.m_x;
    m_y = x.m_y;
    m_yaw = x.m_yaw;
    m_level_name = std::move(x.m_level_name);

    return *this;
}

bool Poi::operator ==(
        const Poi& x) const
{

    return (m_sec == x.m_sec && m_nanosec == x.m_nanosec && m_x == x.m_x && m_y == x.m_y && m_yaw == x.m_yaw && m_level_name == x.m_level_name);
}

bool Poi::operator !=(
        const Poi& x) const
{
    return !(*this == x);
}

size_t Poi::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return Poi_max_cdr_typesize;
}

size_t Poi::getCdrSerializedSize(
        const Poi& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.level_name().size() + 1;


    return current_alignment - initial_alignment;
}

void Poi::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_sec;scdr << m_nanosec;scdr << m_x;scdr << m_y;scdr << m_yaw;scdr << m_level_name.c_str();
}

void Poi::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_sec;
    dcdr >> m_nanosec;
    dcdr >> m_x;
    dcdr >> m_y;
    dcdr >> m_yaw;
    dcdr >> m_level_name;
}

/*!
 * @brief This function sets a value in member sec
 * @param _sec New value for member sec
 */
void Poi::sec(
        uint32_t _sec)
{
    m_sec = _sec;
}

/*!
 * @brief This function returns the value of member sec
 * @return Value of member sec
 */
uint32_t Poi::sec() const
{
    return m_sec;
}

/*!
 * @brief This function returns a reference to member sec
 * @return Reference to member sec
 */
uint32_t& Poi::sec()
{
    return m_sec;
}

/*!
 * @brief This function sets a value in member nanosec
 * @param _nanosec New value for member nanosec
 */
void Poi::nanosec(
        uint32_t _nanosec)
{
    m_nanosec = _nanosec;
}

/*!
 * @brief This function returns the value of member nanosec
 * @return Value of member nanosec
 */
uint32_t Poi::nanosec() const
{
    return m_nanosec;
}

/*!
 * @brief This function returns a reference to member nanosec
 * @return Reference to member nanosec
 */
uint32_t& Poi::nanosec()
{
    return m_nanosec;
}

/*!
 * @brief This function sets a value in member x
 * @param _x New value for member x
 */
void Poi::x(
        float _x)
{
    m_x = _x;
}

/*!
 * @brief This function returns the value of member x
 * @return Value of member x
 */
float Poi::x() const
{
    return m_x;
}

/*!
 * @brief This function returns a reference to member x
 * @return Reference to member x
 */
float& Poi::x()
{
    return m_x;
}

/*!
 * @brief This function sets a value in member y
 * @param _y New value for member y
 */
void Poi::y(
        float _y)
{
    m_y = _y;
}

/*!
 * @brief This function returns the value of member y
 * @return Value of member y
 */
float Poi::y() const
{
    return m_y;
}

/*!
 * @brief This function returns a reference to member y
 * @return Reference to member y
 */
float& Poi::y()
{
    return m_y;
}

/*!
 * @brief This function sets a value in member yaw
 * @param _yaw New value for member yaw
 */
void Poi::yaw(
        float _yaw)
{
    m_yaw = _yaw;
}

/*!
 * @brief This function returns the value of member yaw
 * @return Value of member yaw
 */
float Poi::yaw() const
{
    return m_yaw;
}

/*!
 * @brief This function returns a reference to member yaw
 * @return Reference to member yaw
 */
float& Poi::yaw()
{
    return m_yaw;
}

/*!
 * @brief This function copies the value in member level_name
 * @param _level_name New value to be copied in member level_name
 */
void Poi::level_name(
        const std::string& _level_name)
{
    m_level_name = _level_name;
}

/*!
 * @brief This function moves the value in member level_name
 * @param _level_name New value to be moved in member level_name
 */
void Poi::level_name(
        std::string&& _level_name)
{
    m_level_name = std::move(_level_name);
}

/*!
 * @brief This function returns a constant reference to member level_name
 * @return Constant reference to member level_name
 */
const std::string& Poi::level_name() const
{
    return m_level_name;
}

/*!
 * @brief This function returns a reference to member level_name
 * @return Reference to member level_name
 */
std::string& Poi::level_name()
{
    return m_level_name;
}


size_t Poi::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return Poi_max_key_cdr_typesize;
}

bool Poi::isKeyDefined()
{
    return false;
}

void Poi::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


RobotState::RobotState()
{
    // string m_name
    m_name = "";

    // string m_model
    m_model = "";

    // string m_task_id
    m_task_id = "";

    // RobotMode m_mode

    // float m_battery_percent
    m_battery_percent = 0.0;
    // Poi m_location

    // sequence<Poi> m_path


}

RobotState::~RobotState()
{







}

RobotState::RobotState(
        const RobotState& x)
{
    m_name = x.m_name;
    m_model = x.m_model;
    m_task_id = x.m_task_id;
    m_mode = x.m_mode;
    m_battery_percent = x.m_battery_percent;
    m_location = x.m_location;
    m_path = x.m_path;
}

RobotState::RobotState(
        RobotState&& x) noexcept 
{
    m_name = std::move(x.m_name);
    m_model = std::move(x.m_model);
    m_task_id = std::move(x.m_task_id);
    m_mode = std::move(x.m_mode);
    m_battery_percent = x.m_battery_percent;
    m_location = std::move(x.m_location);
    m_path = std::move(x.m_path);
}

RobotState& RobotState::operator =(
        const RobotState& x)
{

    m_name = x.m_name;
    m_model = x.m_model;
    m_task_id = x.m_task_id;
    m_mode = x.m_mode;
    m_battery_percent = x.m_battery_percent;
    m_location = x.m_location;
    m_path = x.m_path;

    return *this;
}

RobotState& RobotState::operator =(
        RobotState&& x) noexcept
{

    m_name = std::move(x.m_name);
    m_model = std::move(x.m_model);
    m_task_id = std::move(x.m_task_id);
    m_mode = std::move(x.m_mode);
    m_battery_percent = x.m_battery_percent;
    m_location = std::move(x.m_location);
    m_path = std::move(x.m_path);

    return *this;
}

bool RobotState::operator ==(
        const RobotState& x) const
{

    return (m_name == x.m_name && m_model == x.m_model && m_task_id == x.m_task_id && m_mode == x.m_mode && m_battery_percent == x.m_battery_percent && m_location == x.m_location && m_path == x.m_path);
}

bool RobotState::operator !=(
        const RobotState& x) const
{
    return !(*this == x);
}

size_t RobotState::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return RobotState_max_cdr_typesize;
}

size_t RobotState::getCdrSerializedSize(
        const RobotState& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.name().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.model().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.task_id().size() + 1;

    current_alignment += RobotMode::getCdrSerializedSize(data.mode(), current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += Poi::getCdrSerializedSize(data.location(), current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < data.path().size(); ++a)
    {
        current_alignment += Poi::getCdrSerializedSize(data.path().at(a), current_alignment);}


    return current_alignment - initial_alignment;
}

void RobotState::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_name.c_str();scdr << m_model.c_str();scdr << m_task_id.c_str();scdr << m_mode;scdr << m_battery_percent;scdr << m_location;scdr << m_path;

}

void RobotState::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_name;
    dcdr >> m_model;
    dcdr >> m_task_id;
    dcdr >> m_mode;
    dcdr >> m_battery_percent;
    dcdr >> m_location;
    dcdr >> m_path;
}

/*!
 * @brief This function copies the value in member name
 * @param _name New value to be copied in member name
 */
void RobotState::name(
        const std::string& _name)
{
    m_name = _name;
}

/*!
 * @brief This function moves the value in member name
 * @param _name New value to be moved in member name
 */
void RobotState::name(
        std::string&& _name)
{
    m_name = std::move(_name);
}

/*!
 * @brief This function returns a constant reference to member name
 * @return Constant reference to member name
 */
const std::string& RobotState::name() const
{
    return m_name;
}

/*!
 * @brief This function returns a reference to member name
 * @return Reference to member name
 */
std::string& RobotState::name()
{
    return m_name;
}
/*!
 * @brief This function copies the value in member model
 * @param _model New value to be copied in member model
 */
void RobotState::model(
        const std::string& _model)
{
    m_model = _model;
}

/*!
 * @brief This function moves the value in member model
 * @param _model New value to be moved in member model
 */
void RobotState::model(
        std::string&& _model)
{
    m_model = std::move(_model);
}

/*!
 * @brief This function returns a constant reference to member model
 * @return Constant reference to member model
 */
const std::string& RobotState::model() const
{
    return m_model;
}

/*!
 * @brief This function returns a reference to member model
 * @return Reference to member model
 */
std::string& RobotState::model()
{
    return m_model;
}
/*!
 * @brief This function copies the value in member task_id
 * @param _task_id New value to be copied in member task_id
 */
void RobotState::task_id(
        const std::string& _task_id)
{
    m_task_id = _task_id;
}

/*!
 * @brief This function moves the value in member task_id
 * @param _task_id New value to be moved in member task_id
 */
void RobotState::task_id(
        std::string&& _task_id)
{
    m_task_id = std::move(_task_id);
}

/*!
 * @brief This function returns a constant reference to member task_id
 * @return Constant reference to member task_id
 */
const std::string& RobotState::task_id() const
{
    return m_task_id;
}

/*!
 * @brief This function returns a reference to member task_id
 * @return Reference to member task_id
 */
std::string& RobotState::task_id()
{
    return m_task_id;
}
/*!
 * @brief This function copies the value in member mode
 * @param _mode New value to be copied in member mode
 */
void RobotState::mode(
        const RobotMode& _mode)
{
    m_mode = _mode;
}

/*!
 * @brief This function moves the value in member mode
 * @param _mode New value to be moved in member mode
 */
void RobotState::mode(
        RobotMode&& _mode)
{
    m_mode = std::move(_mode);
}

/*!
 * @brief This function returns a constant reference to member mode
 * @return Constant reference to member mode
 */
const RobotMode& RobotState::mode() const
{
    return m_mode;
}

/*!
 * @brief This function returns a reference to member mode
 * @return Reference to member mode
 */
RobotMode& RobotState::mode()
{
    return m_mode;
}
/*!
 * @brief This function sets a value in member battery_percent
 * @param _battery_percent New value for member battery_percent
 */
void RobotState::battery_percent(
        float _battery_percent)
{
    m_battery_percent = _battery_percent;
}

/*!
 * @brief This function returns the value of member battery_percent
 * @return Value of member battery_percent
 */
float RobotState::battery_percent() const
{
    return m_battery_percent;
}

/*!
 * @brief This function returns a reference to member battery_percent
 * @return Reference to member battery_percent
 */
float& RobotState::battery_percent()
{
    return m_battery_percent;
}

/*!
 * @brief This function copies the value in member location
 * @param _location New value to be copied in member location
 */
void RobotState::location(
        const Poi& _location)
{
    m_location = _location;
}

/*!
 * @brief This function moves the value in member location
 * @param _location New value to be moved in member location
 */
void RobotState::location(
        Poi&& _location)
{
    m_location = std::move(_location);
}

/*!
 * @brief This function returns a constant reference to member location
 * @return Constant reference to member location
 */
const Poi& RobotState::location() const
{
    return m_location;
}

/*!
 * @brief This function returns a reference to member location
 * @return Reference to member location
 */
Poi& RobotState::location()
{
    return m_location;
}
/*!
 * @brief This function copies the value in member path
 * @param _path New value to be copied in member path
 */
void RobotState::path(
        const std::vector<Poi>& _path)
{
    m_path = _path;
}

/*!
 * @brief This function moves the value in member path
 * @param _path New value to be moved in member path
 */
void RobotState::path(
        std::vector<Poi>&& _path)
{
    m_path = std::move(_path);
}

/*!
 * @brief This function returns a constant reference to member path
 * @return Constant reference to member path
 */
const std::vector<Poi>& RobotState::path() const
{
    return m_path;
}

/*!
 * @brief This function returns a reference to member path
 * @return Reference to member path
 */
std::vector<Poi>& RobotState::path()
{
    return m_path;
}


size_t RobotState::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return RobotState_max_key_cdr_typesize;
}

bool RobotState::isKeyDefined()
{
    return false;
}

void RobotState::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


ModeParameter::ModeParameter()
{
    // string m_name
    m_name = "";

    // string m_value
    m_value = "";


}

ModeParameter::~ModeParameter()
{


}

ModeParameter::ModeParameter(
        const ModeParameter& x)
{
    m_name = x.m_name;
    m_value = x.m_value;
}

ModeParameter::ModeParameter(
        ModeParameter&& x) noexcept 
{
    m_name = std::move(x.m_name);
    m_value = std::move(x.m_value);
}

ModeParameter& ModeParameter::operator =(
        const ModeParameter& x)
{

    m_name = x.m_name;
    m_value = x.m_value;

    return *this;
}

ModeParameter& ModeParameter::operator =(
        ModeParameter&& x) noexcept
{

    m_name = std::move(x.m_name);
    m_value = std::move(x.m_value);

    return *this;
}

bool ModeParameter::operator ==(
        const ModeParameter& x) const
{

    return (m_name == x.m_name && m_value == x.m_value);
}

bool ModeParameter::operator !=(
        const ModeParameter& x) const
{
    return !(*this == x);
}

size_t ModeParameter::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return ModeParameter_max_cdr_typesize;
}

size_t ModeParameter::getCdrSerializedSize(
        const ModeParameter& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.name().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.value().size() + 1;


    return current_alignment - initial_alignment;
}

void ModeParameter::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_name.c_str();scdr << m_value.c_str();
}

void ModeParameter::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_name;
    dcdr >> m_value;
}

/*!
 * @brief This function copies the value in member name
 * @param _name New value to be copied in member name
 */
void ModeParameter::name(
        const std::string& _name)
{
    m_name = _name;
}

/*!
 * @brief This function moves the value in member name
 * @param _name New value to be moved in member name
 */
void ModeParameter::name(
        std::string&& _name)
{
    m_name = std::move(_name);
}

/*!
 * @brief This function returns a constant reference to member name
 * @return Constant reference to member name
 */
const std::string& ModeParameter::name() const
{
    return m_name;
}

/*!
 * @brief This function returns a reference to member name
 * @return Reference to member name
 */
std::string& ModeParameter::name()
{
    return m_name;
}
/*!
 * @brief This function copies the value in member value
 * @param _value New value to be copied in member value
 */
void ModeParameter::value(
        const std::string& _value)
{
    m_value = _value;
}

/*!
 * @brief This function moves the value in member value
 * @param _value New value to be moved in member value
 */
void ModeParameter::value(
        std::string&& _value)
{
    m_value = std::move(_value);
}

/*!
 * @brief This function returns a constant reference to member value
 * @return Constant reference to member value
 */
const std::string& ModeParameter::value() const
{
    return m_value;
}

/*!
 * @brief This function returns a reference to member value
 * @return Reference to member value
 */
std::string& ModeParameter::value()
{
    return m_value;
}


size_t ModeParameter::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return ModeParameter_max_key_cdr_typesize;
}

bool ModeParameter::isKeyDefined()
{
    return false;
}

void ModeParameter::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


ModeRequest::ModeRequest()
{
    // string m_fleet_name
    m_fleet_name = "";

    // string m_robot_name
    m_robot_name = "";

    // RobotMode m_mode

    // string m_task_id
    m_task_id = "";

    // ModeParameter m_parameters


}

ModeRequest::~ModeRequest()
{





}

ModeRequest::ModeRequest(
        const ModeRequest& x)
{
    m_fleet_name = x.m_fleet_name;
    m_robot_name = x.m_robot_name;
    m_mode = x.m_mode;
    m_task_id = x.m_task_id;
    m_parameters = x.m_parameters;
}

ModeRequest::ModeRequest(
        ModeRequest&& x) noexcept 
{
    m_fleet_name = std::move(x.m_fleet_name);
    m_robot_name = std::move(x.m_robot_name);
    m_mode = std::move(x.m_mode);
    m_task_id = std::move(x.m_task_id);
    m_parameters = std::move(x.m_parameters);
}

ModeRequest& ModeRequest::operator =(
        const ModeRequest& x)
{

    m_fleet_name = x.m_fleet_name;
    m_robot_name = x.m_robot_name;
    m_mode = x.m_mode;
    m_task_id = x.m_task_id;
    m_parameters = x.m_parameters;

    return *this;
}

ModeRequest& ModeRequest::operator =(
        ModeRequest&& x) noexcept
{

    m_fleet_name = std::move(x.m_fleet_name);
    m_robot_name = std::move(x.m_robot_name);
    m_mode = std::move(x.m_mode);
    m_task_id = std::move(x.m_task_id);
    m_parameters = std::move(x.m_parameters);

    return *this;
}

bool ModeRequest::operator ==(
        const ModeRequest& x) const
{

    return (m_fleet_name == x.m_fleet_name && m_robot_name == x.m_robot_name && m_mode == x.m_mode && m_task_id == x.m_task_id && m_parameters == x.m_parameters);
}

bool ModeRequest::operator !=(
        const ModeRequest& x) const
{
    return !(*this == x);
}

size_t ModeRequest::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return ModeRequest_max_cdr_typesize;
}

size_t ModeRequest::getCdrSerializedSize(
        const ModeRequest& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.fleet_name().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.robot_name().size() + 1;

    current_alignment += RobotMode::getCdrSerializedSize(data.mode(), current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.task_id().size() + 1;

    current_alignment += ModeParameter::getCdrSerializedSize(data.parameters(), current_alignment);

    return current_alignment - initial_alignment;
}

void ModeRequest::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_fleet_name.c_str();scdr << m_robot_name.c_str();scdr << m_mode;scdr << m_task_id.c_str();scdr << m_parameters;
}

void ModeRequest::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_fleet_name;
    dcdr >> m_robot_name;
    dcdr >> m_mode;
    dcdr >> m_task_id;
    dcdr >> m_parameters;
}

/*!
 * @brief This function copies the value in member fleet_name
 * @param _fleet_name New value to be copied in member fleet_name
 */
void ModeRequest::fleet_name(
        const std::string& _fleet_name)
{
    m_fleet_name = _fleet_name;
}

/*!
 * @brief This function moves the value in member fleet_name
 * @param _fleet_name New value to be moved in member fleet_name
 */
void ModeRequest::fleet_name(
        std::string&& _fleet_name)
{
    m_fleet_name = std::move(_fleet_name);
}

/*!
 * @brief This function returns a constant reference to member fleet_name
 * @return Constant reference to member fleet_name
 */
const std::string& ModeRequest::fleet_name() const
{
    return m_fleet_name;
}

/*!
 * @brief This function returns a reference to member fleet_name
 * @return Reference to member fleet_name
 */
std::string& ModeRequest::fleet_name()
{
    return m_fleet_name;
}
/*!
 * @brief This function copies the value in member robot_name
 * @param _robot_name New value to be copied in member robot_name
 */
void ModeRequest::robot_name(
        const std::string& _robot_name)
{
    m_robot_name = _robot_name;
}

/*!
 * @brief This function moves the value in member robot_name
 * @param _robot_name New value to be moved in member robot_name
 */
void ModeRequest::robot_name(
        std::string&& _robot_name)
{
    m_robot_name = std::move(_robot_name);
}

/*!
 * @brief This function returns a constant reference to member robot_name
 * @return Constant reference to member robot_name
 */
const std::string& ModeRequest::robot_name() const
{
    return m_robot_name;
}

/*!
 * @brief This function returns a reference to member robot_name
 * @return Reference to member robot_name
 */
std::string& ModeRequest::robot_name()
{
    return m_robot_name;
}
/*!
 * @brief This function copies the value in member mode
 * @param _mode New value to be copied in member mode
 */
void ModeRequest::mode(
        const RobotMode& _mode)
{
    m_mode = _mode;
}

/*!
 * @brief This function moves the value in member mode
 * @param _mode New value to be moved in member mode
 */
void ModeRequest::mode(
        RobotMode&& _mode)
{
    m_mode = std::move(_mode);
}

/*!
 * @brief This function returns a constant reference to member mode
 * @return Constant reference to member mode
 */
const RobotMode& ModeRequest::mode() const
{
    return m_mode;
}

/*!
 * @brief This function returns a reference to member mode
 * @return Reference to member mode
 */
RobotMode& ModeRequest::mode()
{
    return m_mode;
}
/*!
 * @brief This function copies the value in member task_id
 * @param _task_id New value to be copied in member task_id
 */
void ModeRequest::task_id(
        const std::string& _task_id)
{
    m_task_id = _task_id;
}

/*!
 * @brief This function moves the value in member task_id
 * @param _task_id New value to be moved in member task_id
 */
void ModeRequest::task_id(
        std::string&& _task_id)
{
    m_task_id = std::move(_task_id);
}

/*!
 * @brief This function returns a constant reference to member task_id
 * @return Constant reference to member task_id
 */
const std::string& ModeRequest::task_id() const
{
    return m_task_id;
}

/*!
 * @brief This function returns a reference to member task_id
 * @return Reference to member task_id
 */
std::string& ModeRequest::task_id()
{
    return m_task_id;
}
/*!
 * @brief This function copies the value in member parameters
 * @param _parameters New value to be copied in member parameters
 */
void ModeRequest::parameters(
        const ModeParameter& _parameters)
{
    m_parameters = _parameters;
}

/*!
 * @brief This function moves the value in member parameters
 * @param _parameters New value to be moved in member parameters
 */
void ModeRequest::parameters(
        ModeParameter&& _parameters)
{
    m_parameters = std::move(_parameters);
}

/*!
 * @brief This function returns a constant reference to member parameters
 * @return Constant reference to member parameters
 */
const ModeParameter& ModeRequest::parameters() const
{
    return m_parameters;
}

/*!
 * @brief This function returns a reference to member parameters
 * @return Reference to member parameters
 */
ModeParameter& ModeRequest::parameters()
{
    return m_parameters;
}


size_t ModeRequest::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return ModeRequest_max_key_cdr_typesize;
}

bool ModeRequest::isKeyDefined()
{
    return false;
}

void ModeRequest::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


PathRequest::PathRequest()
{
    // string m_fleet_name
    m_fleet_name = "";

    // string m_robot_name
    m_robot_name = "";

    // sequence<Poi> m_path

    // string m_task_id
    m_task_id = "";


}

PathRequest::~PathRequest()
{




}

PathRequest::PathRequest(
        const PathRequest& x)
{
    m_fleet_name = x.m_fleet_name;
    m_robot_name = x.m_robot_name;
    m_path = x.m_path;
    m_task_id = x.m_task_id;
}

PathRequest::PathRequest(
        PathRequest&& x) noexcept 
{
    m_fleet_name = std::move(x.m_fleet_name);
    m_robot_name = std::move(x.m_robot_name);
    m_path = std::move(x.m_path);
    m_task_id = std::move(x.m_task_id);
}

PathRequest& PathRequest::operator =(
        const PathRequest& x)
{

    m_fleet_name = x.m_fleet_name;
    m_robot_name = x.m_robot_name;
    m_path = x.m_path;
    m_task_id = x.m_task_id;

    return *this;
}

PathRequest& PathRequest::operator =(
        PathRequest&& x) noexcept
{

    m_fleet_name = std::move(x.m_fleet_name);
    m_robot_name = std::move(x.m_robot_name);
    m_path = std::move(x.m_path);
    m_task_id = std::move(x.m_task_id);

    return *this;
}

bool PathRequest::operator ==(
        const PathRequest& x) const
{

    return (m_fleet_name == x.m_fleet_name && m_robot_name == x.m_robot_name && m_path == x.m_path && m_task_id == x.m_task_id);
}

bool PathRequest::operator !=(
        const PathRequest& x) const
{
    return !(*this == x);
}

size_t PathRequest::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return PathRequest_max_cdr_typesize;
}

size_t PathRequest::getCdrSerializedSize(
        const PathRequest& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.fleet_name().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.robot_name().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < data.path().size(); ++a)
    {
        current_alignment += Poi::getCdrSerializedSize(data.path().at(a), current_alignment);}

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.task_id().size() + 1;


    return current_alignment - initial_alignment;
}

void PathRequest::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_fleet_name.c_str();scdr << m_robot_name.c_str();scdr << m_path;
    scdr << m_task_id.c_str();
}

void PathRequest::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_fleet_name;
    dcdr >> m_robot_name;
    dcdr >> m_path;
    dcdr >> m_task_id;
}

/*!
 * @brief This function copies the value in member fleet_name
 * @param _fleet_name New value to be copied in member fleet_name
 */
void PathRequest::fleet_name(
        const std::string& _fleet_name)
{
    m_fleet_name = _fleet_name;
}

/*!
 * @brief This function moves the value in member fleet_name
 * @param _fleet_name New value to be moved in member fleet_name
 */
void PathRequest::fleet_name(
        std::string&& _fleet_name)
{
    m_fleet_name = std::move(_fleet_name);
}

/*!
 * @brief This function returns a constant reference to member fleet_name
 * @return Constant reference to member fleet_name
 */
const std::string& PathRequest::fleet_name() const
{
    return m_fleet_name;
}

/*!
 * @brief This function returns a reference to member fleet_name
 * @return Reference to member fleet_name
 */
std::string& PathRequest::fleet_name()
{
    return m_fleet_name;
}
/*!
 * @brief This function copies the value in member robot_name
 * @param _robot_name New value to be copied in member robot_name
 */
void PathRequest::robot_name(
        const std::string& _robot_name)
{
    m_robot_name = _robot_name;
}

/*!
 * @brief This function moves the value in member robot_name
 * @param _robot_name New value to be moved in member robot_name
 */
void PathRequest::robot_name(
        std::string&& _robot_name)
{
    m_robot_name = std::move(_robot_name);
}

/*!
 * @brief This function returns a constant reference to member robot_name
 * @return Constant reference to member robot_name
 */
const std::string& PathRequest::robot_name() const
{
    return m_robot_name;
}

/*!
 * @brief This function returns a reference to member robot_name
 * @return Reference to member robot_name
 */
std::string& PathRequest::robot_name()
{
    return m_robot_name;
}
/*!
 * @brief This function copies the value in member path
 * @param _path New value to be copied in member path
 */
void PathRequest::path(
        const std::vector<Poi>& _path)
{
    m_path = _path;
}

/*!
 * @brief This function moves the value in member path
 * @param _path New value to be moved in member path
 */
void PathRequest::path(
        std::vector<Poi>&& _path)
{
    m_path = std::move(_path);
}

/*!
 * @brief This function returns a constant reference to member path
 * @return Constant reference to member path
 */
const std::vector<Poi>& PathRequest::path() const
{
    return m_path;
}

/*!
 * @brief This function returns a reference to member path
 * @return Reference to member path
 */
std::vector<Poi>& PathRequest::path()
{
    return m_path;
}
/*!
 * @brief This function copies the value in member task_id
 * @param _task_id New value to be copied in member task_id
 */
void PathRequest::task_id(
        const std::string& _task_id)
{
    m_task_id = _task_id;
}

/*!
 * @brief This function moves the value in member task_id
 * @param _task_id New value to be moved in member task_id
 */
void PathRequest::task_id(
        std::string&& _task_id)
{
    m_task_id = std::move(_task_id);
}

/*!
 * @brief This function returns a constant reference to member task_id
 * @return Constant reference to member task_id
 */
const std::string& PathRequest::task_id() const
{
    return m_task_id;
}

/*!
 * @brief This function returns a reference to member task_id
 * @return Reference to member task_id
 */
std::string& PathRequest::task_id()
{
    return m_task_id;
}


size_t PathRequest::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return PathRequest_max_key_cdr_typesize;
}

bool PathRequest::isKeyDefined()
{
    return false;
}

void PathRequest::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


DestinationRequest::DestinationRequest()
{
    // string m_fleet_name
    m_fleet_name = "";

    // string m_robot_name
    m_robot_name = "";

    // Poi m_destination

    // string m_task_id
    m_task_id = "";


}

DestinationRequest::~DestinationRequest()
{




}

DestinationRequest::DestinationRequest(
        const DestinationRequest& x)
{
    m_fleet_name = x.m_fleet_name;
    m_robot_name = x.m_robot_name;
    m_destination = x.m_destination;
    m_task_id = x.m_task_id;
}

DestinationRequest::DestinationRequest(
        DestinationRequest&& x) noexcept 
{
    m_fleet_name = std::move(x.m_fleet_name);
    m_robot_name = std::move(x.m_robot_name);
    m_destination = std::move(x.m_destination);
    m_task_id = std::move(x.m_task_id);
}

DestinationRequest& DestinationRequest::operator =(
        const DestinationRequest& x)
{

    m_fleet_name = x.m_fleet_name;
    m_robot_name = x.m_robot_name;
    m_destination = x.m_destination;
    m_task_id = x.m_task_id;

    return *this;
}

DestinationRequest& DestinationRequest::operator =(
        DestinationRequest&& x) noexcept
{

    m_fleet_name = std::move(x.m_fleet_name);
    m_robot_name = std::move(x.m_robot_name);
    m_destination = std::move(x.m_destination);
    m_task_id = std::move(x.m_task_id);

    return *this;
}

bool DestinationRequest::operator ==(
        const DestinationRequest& x) const
{

    return (m_fleet_name == x.m_fleet_name && m_robot_name == x.m_robot_name && m_destination == x.m_destination && m_task_id == x.m_task_id);
}

bool DestinationRequest::operator !=(
        const DestinationRequest& x) const
{
    return !(*this == x);
}

size_t DestinationRequest::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return DestinationRequest_max_cdr_typesize;
}

size_t DestinationRequest::getCdrSerializedSize(
        const DestinationRequest& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.fleet_name().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.robot_name().size() + 1;

    current_alignment += Poi::getCdrSerializedSize(data.destination(), current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.task_id().size() + 1;


    return current_alignment - initial_alignment;
}

void DestinationRequest::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_fleet_name.c_str();scdr << m_robot_name.c_str();scdr << m_destination;scdr << m_task_id.c_str();
}

void DestinationRequest::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_fleet_name;
    dcdr >> m_robot_name;
    dcdr >> m_destination;
    dcdr >> m_task_id;
}

/*!
 * @brief This function copies the value in member fleet_name
 * @param _fleet_name New value to be copied in member fleet_name
 */
void DestinationRequest::fleet_name(
        const std::string& _fleet_name)
{
    m_fleet_name = _fleet_name;
}

/*!
 * @brief This function moves the value in member fleet_name
 * @param _fleet_name New value to be moved in member fleet_name
 */
void DestinationRequest::fleet_name(
        std::string&& _fleet_name)
{
    m_fleet_name = std::move(_fleet_name);
}

/*!
 * @brief This function returns a constant reference to member fleet_name
 * @return Constant reference to member fleet_name
 */
const std::string& DestinationRequest::fleet_name() const
{
    return m_fleet_name;
}

/*!
 * @brief This function returns a reference to member fleet_name
 * @return Reference to member fleet_name
 */
std::string& DestinationRequest::fleet_name()
{
    return m_fleet_name;
}
/*!
 * @brief This function copies the value in member robot_name
 * @param _robot_name New value to be copied in member robot_name
 */
void DestinationRequest::robot_name(
        const std::string& _robot_name)
{
    m_robot_name = _robot_name;
}

/*!
 * @brief This function moves the value in member robot_name
 * @param _robot_name New value to be moved in member robot_name
 */
void DestinationRequest::robot_name(
        std::string&& _robot_name)
{
    m_robot_name = std::move(_robot_name);
}

/*!
 * @brief This function returns a constant reference to member robot_name
 * @return Constant reference to member robot_name
 */
const std::string& DestinationRequest::robot_name() const
{
    return m_robot_name;
}

/*!
 * @brief This function returns a reference to member robot_name
 * @return Reference to member robot_name
 */
std::string& DestinationRequest::robot_name()
{
    return m_robot_name;
}
/*!
 * @brief This function copies the value in member destination
 * @param _destination New value to be copied in member destination
 */
void DestinationRequest::destination(
        const Poi& _destination)
{
    m_destination = _destination;
}

/*!
 * @brief This function moves the value in member destination
 * @param _destination New value to be moved in member destination
 */
void DestinationRequest::destination(
        Poi&& _destination)
{
    m_destination = std::move(_destination);
}

/*!
 * @brief This function returns a constant reference to member destination
 * @return Constant reference to member destination
 */
const Poi& DestinationRequest::destination() const
{
    return m_destination;
}

/*!
 * @brief This function returns a reference to member destination
 * @return Reference to member destination
 */
Poi& DestinationRequest::destination()
{
    return m_destination;
}
/*!
 * @brief This function copies the value in member task_id
 * @param _task_id New value to be copied in member task_id
 */
void DestinationRequest::task_id(
        const std::string& _task_id)
{
    m_task_id = _task_id;
}

/*!
 * @brief This function moves the value in member task_id
 * @param _task_id New value to be moved in member task_id
 */
void DestinationRequest::task_id(
        std::string&& _task_id)
{
    m_task_id = std::move(_task_id);
}

/*!
 * @brief This function returns a constant reference to member task_id
 * @return Constant reference to member task_id
 */
const std::string& DestinationRequest::task_id() const
{
    return m_task_id;
}

/*!
 * @brief This function returns a reference to member task_id
 * @return Reference to member task_id
 */
std::string& DestinationRequest::task_id()
{
    return m_task_id;
}


size_t DestinationRequest::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return DestinationRequest_max_key_cdr_typesize;
}

bool DestinationRequest::isKeyDefined()
{
    return false;
}

void DestinationRequest::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


OpenDrawerRequest::OpenDrawerRequest()
{
    // string m_fleet_name
    m_fleet_name = "";

    // string m_robot_name
    m_robot_name = "";

    // short m_module_id
    m_module_id = 0;
    // short m_drawer_id
    m_drawer_id = 0;
    // boolean m_e_drawer
    m_e_drawer = false;

}

OpenDrawerRequest::~OpenDrawerRequest()
{





}

OpenDrawerRequest::OpenDrawerRequest(
        const OpenDrawerRequest& x)
{
    m_fleet_name = x.m_fleet_name;
    m_robot_name = x.m_robot_name;
    m_module_id = x.m_module_id;
    m_drawer_id = x.m_drawer_id;
    m_e_drawer = x.m_e_drawer;
}

OpenDrawerRequest::OpenDrawerRequest(
        OpenDrawerRequest&& x) noexcept 
{
    m_fleet_name = std::move(x.m_fleet_name);
    m_robot_name = std::move(x.m_robot_name);
    m_module_id = x.m_module_id;
    m_drawer_id = x.m_drawer_id;
    m_e_drawer = x.m_e_drawer;
}

OpenDrawerRequest& OpenDrawerRequest::operator =(
        const OpenDrawerRequest& x)
{

    m_fleet_name = x.m_fleet_name;
    m_robot_name = x.m_robot_name;
    m_module_id = x.m_module_id;
    m_drawer_id = x.m_drawer_id;
    m_e_drawer = x.m_e_drawer;

    return *this;
}

OpenDrawerRequest& OpenDrawerRequest::operator =(
        OpenDrawerRequest&& x) noexcept
{

    m_fleet_name = std::move(x.m_fleet_name);
    m_robot_name = std::move(x.m_robot_name);
    m_module_id = x.m_module_id;
    m_drawer_id = x.m_drawer_id;
    m_e_drawer = x.m_e_drawer;

    return *this;
}

bool OpenDrawerRequest::operator ==(
        const OpenDrawerRequest& x) const
{

    return (m_fleet_name == x.m_fleet_name && m_robot_name == x.m_robot_name && m_module_id == x.m_module_id && m_drawer_id == x.m_drawer_id && m_e_drawer == x.m_e_drawer);
}

bool OpenDrawerRequest::operator !=(
        const OpenDrawerRequest& x) const
{
    return !(*this == x);
}

size_t OpenDrawerRequest::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return OpenDrawerRequest_max_cdr_typesize;
}

size_t OpenDrawerRequest::getCdrSerializedSize(
        const OpenDrawerRequest& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.fleet_name().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.robot_name().size() + 1;

    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

void OpenDrawerRequest::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_fleet_name.c_str();scdr << m_robot_name.c_str();scdr << m_module_id;scdr << m_drawer_id;scdr << m_e_drawer;
}

void OpenDrawerRequest::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_fleet_name;
    dcdr >> m_robot_name;
    dcdr >> m_module_id;
    dcdr >> m_drawer_id;
    dcdr >> m_e_drawer;
}

/*!
 * @brief This function copies the value in member fleet_name
 * @param _fleet_name New value to be copied in member fleet_name
 */
void OpenDrawerRequest::fleet_name(
        const std::string& _fleet_name)
{
    m_fleet_name = _fleet_name;
}

/*!
 * @brief This function moves the value in member fleet_name
 * @param _fleet_name New value to be moved in member fleet_name
 */
void OpenDrawerRequest::fleet_name(
        std::string&& _fleet_name)
{
    m_fleet_name = std::move(_fleet_name);
}

/*!
 * @brief This function returns a constant reference to member fleet_name
 * @return Constant reference to member fleet_name
 */
const std::string& OpenDrawerRequest::fleet_name() const
{
    return m_fleet_name;
}

/*!
 * @brief This function returns a reference to member fleet_name
 * @return Reference to member fleet_name
 */
std::string& OpenDrawerRequest::fleet_name()
{
    return m_fleet_name;
}
/*!
 * @brief This function copies the value in member robot_name
 * @param _robot_name New value to be copied in member robot_name
 */
void OpenDrawerRequest::robot_name(
        const std::string& _robot_name)
{
    m_robot_name = _robot_name;
}

/*!
 * @brief This function moves the value in member robot_name
 * @param _robot_name New value to be moved in member robot_name
 */
void OpenDrawerRequest::robot_name(
        std::string&& _robot_name)
{
    m_robot_name = std::move(_robot_name);
}

/*!
 * @brief This function returns a constant reference to member robot_name
 * @return Constant reference to member robot_name
 */
const std::string& OpenDrawerRequest::robot_name() const
{
    return m_robot_name;
}

/*!
 * @brief This function returns a reference to member robot_name
 * @return Reference to member robot_name
 */
std::string& OpenDrawerRequest::robot_name()
{
    return m_robot_name;
}
/*!
 * @brief This function sets a value in member module_id
 * @param _module_id New value for member module_id
 */
void OpenDrawerRequest::module_id(
        int16_t _module_id)
{
    m_module_id = _module_id;
}

/*!
 * @brief This function returns the value of member module_id
 * @return Value of member module_id
 */
int16_t OpenDrawerRequest::module_id() const
{
    return m_module_id;
}

/*!
 * @brief This function returns a reference to member module_id
 * @return Reference to member module_id
 */
int16_t& OpenDrawerRequest::module_id()
{
    return m_module_id;
}

/*!
 * @brief This function sets a value in member drawer_id
 * @param _drawer_id New value for member drawer_id
 */
void OpenDrawerRequest::drawer_id(
        int16_t _drawer_id)
{
    m_drawer_id = _drawer_id;
}

/*!
 * @brief This function returns the value of member drawer_id
 * @return Value of member drawer_id
 */
int16_t OpenDrawerRequest::drawer_id() const
{
    return m_drawer_id;
}

/*!
 * @brief This function returns a reference to member drawer_id
 * @return Reference to member drawer_id
 */
int16_t& OpenDrawerRequest::drawer_id()
{
    return m_drawer_id;
}

/*!
 * @brief This function sets a value in member e_drawer
 * @param _e_drawer New value for member e_drawer
 */
void OpenDrawerRequest::e_drawer(
        bool _e_drawer)
{
    m_e_drawer = _e_drawer;
}

/*!
 * @brief This function returns the value of member e_drawer
 * @return Value of member e_drawer
 */
bool OpenDrawerRequest::e_drawer() const
{
    return m_e_drawer;
}

/*!
 * @brief This function returns a reference to member e_drawer
 * @return Reference to member e_drawer
 */
bool& OpenDrawerRequest::e_drawer()
{
    return m_e_drawer;
}



size_t OpenDrawerRequest::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return OpenDrawerRequest_max_key_cdr_typesize;
}

bool OpenDrawerRequest::isKeyDefined()
{
    return false;
}

void OpenDrawerRequest::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}

