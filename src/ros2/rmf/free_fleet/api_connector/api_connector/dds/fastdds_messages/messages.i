// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file messages.i
 * This header file contains the SWIG interface of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

%module messages

// SWIG helper modules
%include "stdint.i"
%include "std_string.i"
%include "std_vector.i"
%include "std_array.i"
%include "std_map.i"
%include "typemaps.i"

// Assignemt operators are ignored, as there is no such thing in Python.
// Trying to export them issues a warning
%ignore *::operator=;

// Macro declarations
// Any macro used on the Fast DDS header files will give an error if it is not redefined here
#define RTPS_DllAPI
#define eProsima_user_DllExport


%{
#include "messages.h"

#include <fastdds/dds/core/LoanableSequence.hpp>
%}

%import(module="fastdds") "fastdds/dds/core/LoanableCollection.hpp"
%import(module="fastdds") "fastdds/dds/core/LoanableTypedCollection.hpp"
%import(module="fastdds") "fastdds/dds/core/LoanableSequence.hpp"

////////////////////////////////////////////////////////
// Binding for class RobotMode
////////////////////////////////////////////////////////

// Ignore overloaded methods that have no application on Python
// Otherwise they will issue a warning
%ignore RobotMode::RobotMode(RobotMode&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Avoid a warning ignoring all but one
%ignore RobotMode::mode(uint32_t&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore RobotMode::mode();
%rename("%s") RobotMode::mode() const;


%template(_RobotModeSeq) eprosima::fastdds::dds::LoanableTypedCollection<RobotMode, std::false_type>;
%template(RobotModeSeq) eprosima::fastdds::dds::LoanableSequence<RobotMode, std::false_type>;
%extend eprosima::fastdds::dds::LoanableSequence<RobotMode, std::false_type>
{
    size_t __len__() const
    {
        return self->length();
    }

    const RobotMode& __getitem__(size_t i) const
    {
        return (*self)[i];
    }
}

////////////////////////////////////////////////////////
// Binding for class Poi
////////////////////////////////////////////////////////

// Ignore overloaded methods that have no application on Python
// Otherwise they will issue a warning
%ignore Poi::Poi(Poi&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Avoid a warning ignoring all but one
%ignore Poi::sec(uint32_t&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore Poi::sec();
%rename("%s") Poi::sec() const;

%ignore Poi::nanosec(uint32_t&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore Poi::nanosec();
%rename("%s") Poi::nanosec() const;

%ignore Poi::x(float&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore Poi::x();
%rename("%s") Poi::x() const;

%ignore Poi::y(float&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore Poi::y();
%rename("%s") Poi::y() const;

%ignore Poi::yaw(float&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore Poi::yaw();
%rename("%s") Poi::yaw() const;

%ignore Poi::level_name(std::string&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore Poi::level_name();
%rename("%s") Poi::level_name() const;


%template(_PoiSeq) eprosima::fastdds::dds::LoanableTypedCollection<Poi, std::false_type>;
%template(PoiSeq) eprosima::fastdds::dds::LoanableSequence<Poi, std::false_type>;
%extend eprosima::fastdds::dds::LoanableSequence<Poi, std::false_type>
{
    size_t __len__() const
    {
        return self->length();
    }

    const Poi& __getitem__(size_t i) const
    {
        return (*self)[i];
    }
}

////////////////////////////////////////////////////////
// Binding for class RobotState
////////////////////////////////////////////////////////

// Ignore overloaded methods that have no application on Python
// Otherwise they will issue a warning
%ignore RobotState::RobotState(RobotState&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Avoid a warning ignoring all but one
%ignore RobotState::name(std::string&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore RobotState::name();
%rename("%s") RobotState::name() const;

%ignore RobotState::model(std::string&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore RobotState::model();
%rename("%s") RobotState::model() const;

%ignore RobotState::task_id(std::string&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore RobotState::task_id();
%rename("%s") RobotState::task_id() const;

%ignore RobotState::mode(RobotMode&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore RobotState::mode();
%rename("%s") RobotState::mode() const;

%ignore RobotState::battery_percent(float&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore RobotState::battery_percent();
%rename("%s") RobotState::battery_percent() const;

%ignore RobotState::location(Poi&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore RobotState::location();
%rename("%s") RobotState::location() const;

%ignore RobotState::path(std::vector<Poi>&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore RobotState::path() const;
%template(Poi_vector) std::vector<Poi>;


%template(_RobotStateSeq) eprosima::fastdds::dds::LoanableTypedCollection<RobotState, std::false_type>;
%template(RobotStateSeq) eprosima::fastdds::dds::LoanableSequence<RobotState, std::false_type>;
%extend eprosima::fastdds::dds::LoanableSequence<RobotState, std::false_type>
{
    size_t __len__() const
    {
        return self->length();
    }

    const RobotState& __getitem__(size_t i) const
    {
        return (*self)[i];
    }
}

////////////////////////////////////////////////////////
// Binding for class ModeParameter
////////////////////////////////////////////////////////

// Ignore overloaded methods that have no application on Python
// Otherwise they will issue a warning
%ignore ModeParameter::ModeParameter(ModeParameter&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Avoid a warning ignoring all but one
%ignore ModeParameter::name(std::string&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore ModeParameter::name();
%rename("%s") ModeParameter::name() const;

%ignore ModeParameter::value(std::string&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore ModeParameter::value();
%rename("%s") ModeParameter::value() const;


%template(_ModeParameterSeq) eprosima::fastdds::dds::LoanableTypedCollection<ModeParameter, std::false_type>;
%template(ModeParameterSeq) eprosima::fastdds::dds::LoanableSequence<ModeParameter, std::false_type>;
%extend eprosima::fastdds::dds::LoanableSequence<ModeParameter, std::false_type>
{
    size_t __len__() const
    {
        return self->length();
    }

    const ModeParameter& __getitem__(size_t i) const
    {
        return (*self)[i];
    }
}

////////////////////////////////////////////////////////
// Binding for class ModeRequest
////////////////////////////////////////////////////////

// Ignore overloaded methods that have no application on Python
// Otherwise they will issue a warning
%ignore ModeRequest::ModeRequest(ModeRequest&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Avoid a warning ignoring all but one
%ignore ModeRequest::fleet_name(std::string&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore ModeRequest::fleet_name();
%rename("%s") ModeRequest::fleet_name() const;

%ignore ModeRequest::robot_name(std::string&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore ModeRequest::robot_name();
%rename("%s") ModeRequest::robot_name() const;

%ignore ModeRequest::mode(RobotMode&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore ModeRequest::mode();
%rename("%s") ModeRequest::mode() const;

%ignore ModeRequest::task_id(std::string&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore ModeRequest::task_id();
%rename("%s") ModeRequest::task_id() const;

%ignore ModeRequest::parameters(ModeParameter&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore ModeRequest::parameters();
%rename("%s") ModeRequest::parameters() const;


%template(_ModeRequestSeq) eprosima::fastdds::dds::LoanableTypedCollection<ModeRequest, std::false_type>;
%template(ModeRequestSeq) eprosima::fastdds::dds::LoanableSequence<ModeRequest, std::false_type>;
%extend eprosima::fastdds::dds::LoanableSequence<ModeRequest, std::false_type>
{
    size_t __len__() const
    {
        return self->length();
    }

    const ModeRequest& __getitem__(size_t i) const
    {
        return (*self)[i];
    }
}

////////////////////////////////////////////////////////
// Binding for class PathRequest
////////////////////////////////////////////////////////

// Ignore overloaded methods that have no application on Python
// Otherwise they will issue a warning
%ignore PathRequest::PathRequest(PathRequest&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Avoid a warning ignoring all but one
%ignore PathRequest::fleet_name(std::string&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore PathRequest::fleet_name();
%rename("%s") PathRequest::fleet_name() const;

%ignore PathRequest::robot_name(std::string&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore PathRequest::robot_name();
%rename("%s") PathRequest::robot_name() const;

%ignore PathRequest::path(std::vector<Poi>&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore PathRequest::path() const;
%template(Poi_vector) std::vector<Poi>;

%ignore PathRequest::task_id(std::string&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore PathRequest::task_id();
%rename("%s") PathRequest::task_id() const;


%template(_PathRequestSeq) eprosima::fastdds::dds::LoanableTypedCollection<PathRequest, std::false_type>;
%template(PathRequestSeq) eprosima::fastdds::dds::LoanableSequence<PathRequest, std::false_type>;
%extend eprosima::fastdds::dds::LoanableSequence<PathRequest, std::false_type>
{
    size_t __len__() const
    {
        return self->length();
    }

    const PathRequest& __getitem__(size_t i) const
    {
        return (*self)[i];
    }
}

////////////////////////////////////////////////////////
// Binding for class DestinationRequest
////////////////////////////////////////////////////////

// Ignore overloaded methods that have no application on Python
// Otherwise they will issue a warning
%ignore DestinationRequest::DestinationRequest(DestinationRequest&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Avoid a warning ignoring all but one
%ignore DestinationRequest::fleet_name(std::string&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore DestinationRequest::fleet_name();
%rename("%s") DestinationRequest::fleet_name() const;

%ignore DestinationRequest::robot_name(std::string&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore DestinationRequest::robot_name();
%rename("%s") DestinationRequest::robot_name() const;

%ignore DestinationRequest::destination(Poi&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore DestinationRequest::destination();
%rename("%s") DestinationRequest::destination() const;

%ignore DestinationRequest::task_id(std::string&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore DestinationRequest::task_id();
%rename("%s") DestinationRequest::task_id() const;


%template(_DestinationRequestSeq) eprosima::fastdds::dds::LoanableTypedCollection<DestinationRequest, std::false_type>;
%template(DestinationRequestSeq) eprosima::fastdds::dds::LoanableSequence<DestinationRequest, std::false_type>;
%extend eprosima::fastdds::dds::LoanableSequence<DestinationRequest, std::false_type>
{
    size_t __len__() const
    {
        return self->length();
    }

    const DestinationRequest& __getitem__(size_t i) const
    {
        return (*self)[i];
    }
}

////////////////////////////////////////////////////////
// Binding for class OpenDrawerRequest
////////////////////////////////////////////////////////

// Ignore overloaded methods that have no application on Python
// Otherwise they will issue a warning
%ignore OpenDrawerRequest::OpenDrawerRequest(OpenDrawerRequest&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Avoid a warning ignoring all but one
%ignore OpenDrawerRequest::fleet_name(std::string&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore OpenDrawerRequest::fleet_name();
%rename("%s") OpenDrawerRequest::fleet_name() const;

%ignore OpenDrawerRequest::robot_name(std::string&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore OpenDrawerRequest::robot_name();
%rename("%s") OpenDrawerRequest::robot_name() const;

%ignore OpenDrawerRequest::module_id(int16_t&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore OpenDrawerRequest::module_id();
%rename("%s") OpenDrawerRequest::module_id() const;

%ignore OpenDrawerRequest::drawer_id(int16_t&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore OpenDrawerRequest::drawer_id();
%rename("%s") OpenDrawerRequest::drawer_id() const;

%ignore OpenDrawerRequest::e_drawer(bool&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore OpenDrawerRequest::e_drawer();
%rename("%s") OpenDrawerRequest::e_drawer() const;


%template(_OpenDrawerRequestSeq) eprosima::fastdds::dds::LoanableTypedCollection<OpenDrawerRequest, std::false_type>;
%template(OpenDrawerRequestSeq) eprosima::fastdds::dds::LoanableSequence<OpenDrawerRequest, std::false_type>;
%extend eprosima::fastdds::dds::LoanableSequence<OpenDrawerRequest, std::false_type>
{
    size_t __len__() const
    {
        return self->length();
    }

    const OpenDrawerRequest& __getitem__(size_t i) const
    {
        return (*self)[i];
    }
}


// Include the class interfaces
%include "messages.h"

// Include the corresponding TopicDataType
%include "messagesPubSubTypes.i"

