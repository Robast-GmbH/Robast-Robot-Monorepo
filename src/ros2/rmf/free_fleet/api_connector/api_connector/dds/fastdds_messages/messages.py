# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _messagesWrapper
else:
    import _messagesWrapper

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _messagesWrapper.delete_SwigPyIterator

    def value(self):
        return _messagesWrapper.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _messagesWrapper.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _messagesWrapper.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _messagesWrapper.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _messagesWrapper.SwigPyIterator_equal(self, x)

    def copy(self):
        return _messagesWrapper.SwigPyIterator_copy(self)

    def next(self):
        return _messagesWrapper.SwigPyIterator_next(self)

    def __next__(self):
        return _messagesWrapper.SwigPyIterator___next__(self)

    def previous(self):
        return _messagesWrapper.SwigPyIterator_previous(self)

    def advance(self, n):
        return _messagesWrapper.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _messagesWrapper.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _messagesWrapper.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _messagesWrapper.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _messagesWrapper.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _messagesWrapper.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _messagesWrapper.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _messagesWrapper:
_messagesWrapper.SwigPyIterator_swigregister(SwigPyIterator)

import fastdds
class _RobotModeSeq(fastdds.LoanableCollection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _messagesWrapper.delete__RobotModeSeq

# Register _RobotModeSeq in _messagesWrapper:
_messagesWrapper._RobotModeSeq_swigregister(_RobotModeSeq)

class RobotModeSeq(_RobotModeSeq):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _messagesWrapper.delete_RobotModeSeq

    def __init__(self, *args):
        _messagesWrapper.RobotModeSeq_swiginit(self, _messagesWrapper.new_RobotModeSeq(*args))

    def __len__(self):
        return _messagesWrapper.RobotModeSeq___len__(self)

    def __getitem__(self, i):
        return _messagesWrapper.RobotModeSeq___getitem__(self, i)

# Register RobotModeSeq in _messagesWrapper:
_messagesWrapper.RobotModeSeq_swigregister(RobotModeSeq)

class _PoiSeq(fastdds.LoanableCollection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _messagesWrapper.delete__PoiSeq

# Register _PoiSeq in _messagesWrapper:
_messagesWrapper._PoiSeq_swigregister(_PoiSeq)

class PoiSeq(_PoiSeq):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _messagesWrapper.delete_PoiSeq

    def __init__(self, *args):
        _messagesWrapper.PoiSeq_swiginit(self, _messagesWrapper.new_PoiSeq(*args))

    def __len__(self):
        return _messagesWrapper.PoiSeq___len__(self)

    def __getitem__(self, i):
        return _messagesWrapper.PoiSeq___getitem__(self, i)

# Register PoiSeq in _messagesWrapper:
_messagesWrapper.PoiSeq_swigregister(PoiSeq)

class Poi_vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _messagesWrapper.Poi_vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _messagesWrapper.Poi_vector___nonzero__(self)

    def __bool__(self):
        return _messagesWrapper.Poi_vector___bool__(self)

    def __len__(self):
        return _messagesWrapper.Poi_vector___len__(self)

    def __getslice__(self, i, j):
        return _messagesWrapper.Poi_vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _messagesWrapper.Poi_vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _messagesWrapper.Poi_vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _messagesWrapper.Poi_vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _messagesWrapper.Poi_vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _messagesWrapper.Poi_vector___setitem__(self, *args)

    def pop(self):
        return _messagesWrapper.Poi_vector_pop(self)

    def append(self, x):
        return _messagesWrapper.Poi_vector_append(self, x)

    def empty(self):
        return _messagesWrapper.Poi_vector_empty(self)

    def size(self):
        return _messagesWrapper.Poi_vector_size(self)

    def swap(self, v):
        return _messagesWrapper.Poi_vector_swap(self, v)

    def begin(self):
        return _messagesWrapper.Poi_vector_begin(self)

    def end(self):
        return _messagesWrapper.Poi_vector_end(self)

    def rbegin(self):
        return _messagesWrapper.Poi_vector_rbegin(self)

    def rend(self):
        return _messagesWrapper.Poi_vector_rend(self)

    def clear(self):
        return _messagesWrapper.Poi_vector_clear(self)

    def get_allocator(self):
        return _messagesWrapper.Poi_vector_get_allocator(self)

    def pop_back(self):
        return _messagesWrapper.Poi_vector_pop_back(self)

    def erase(self, *args):
        return _messagesWrapper.Poi_vector_erase(self, *args)

    def __init__(self, *args):
        _messagesWrapper.Poi_vector_swiginit(self, _messagesWrapper.new_Poi_vector(*args))

    def push_back(self, x):
        return _messagesWrapper.Poi_vector_push_back(self, x)

    def front(self):
        return _messagesWrapper.Poi_vector_front(self)

    def back(self):
        return _messagesWrapper.Poi_vector_back(self)

    def assign(self, n, x):
        return _messagesWrapper.Poi_vector_assign(self, n, x)

    def resize(self, *args):
        return _messagesWrapper.Poi_vector_resize(self, *args)

    def insert(self, *args):
        return _messagesWrapper.Poi_vector_insert(self, *args)

    def reserve(self, n):
        return _messagesWrapper.Poi_vector_reserve(self, n)

    def capacity(self):
        return _messagesWrapper.Poi_vector_capacity(self)
    __swig_destroy__ = _messagesWrapper.delete_Poi_vector

# Register Poi_vector in _messagesWrapper:
_messagesWrapper.Poi_vector_swigregister(Poi_vector)

class _RobotStateSeq(fastdds.LoanableCollection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _messagesWrapper.delete__RobotStateSeq

# Register _RobotStateSeq in _messagesWrapper:
_messagesWrapper._RobotStateSeq_swigregister(_RobotStateSeq)

class RobotStateSeq(_RobotStateSeq):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _messagesWrapper.delete_RobotStateSeq

    def __init__(self, *args):
        _messagesWrapper.RobotStateSeq_swiginit(self, _messagesWrapper.new_RobotStateSeq(*args))

    def __len__(self):
        return _messagesWrapper.RobotStateSeq___len__(self)

    def __getitem__(self, i):
        return _messagesWrapper.RobotStateSeq___getitem__(self, i)

# Register RobotStateSeq in _messagesWrapper:
_messagesWrapper.RobotStateSeq_swigregister(RobotStateSeq)

class _ModeParameterSeq(fastdds.LoanableCollection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _messagesWrapper.delete__ModeParameterSeq

# Register _ModeParameterSeq in _messagesWrapper:
_messagesWrapper._ModeParameterSeq_swigregister(_ModeParameterSeq)

class ModeParameterSeq(_ModeParameterSeq):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _messagesWrapper.delete_ModeParameterSeq

    def __init__(self, *args):
        _messagesWrapper.ModeParameterSeq_swiginit(self, _messagesWrapper.new_ModeParameterSeq(*args))

    def __len__(self):
        return _messagesWrapper.ModeParameterSeq___len__(self)

    def __getitem__(self, i):
        return _messagesWrapper.ModeParameterSeq___getitem__(self, i)

# Register ModeParameterSeq in _messagesWrapper:
_messagesWrapper.ModeParameterSeq_swigregister(ModeParameterSeq)

class _ModeRequestSeq(fastdds.LoanableCollection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _messagesWrapper.delete__ModeRequestSeq

# Register _ModeRequestSeq in _messagesWrapper:
_messagesWrapper._ModeRequestSeq_swigregister(_ModeRequestSeq)

class ModeRequestSeq(_ModeRequestSeq):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _messagesWrapper.delete_ModeRequestSeq

    def __init__(self, *args):
        _messagesWrapper.ModeRequestSeq_swiginit(self, _messagesWrapper.new_ModeRequestSeq(*args))

    def __len__(self):
        return _messagesWrapper.ModeRequestSeq___len__(self)

    def __getitem__(self, i):
        return _messagesWrapper.ModeRequestSeq___getitem__(self, i)

# Register ModeRequestSeq in _messagesWrapper:
_messagesWrapper.ModeRequestSeq_swigregister(ModeRequestSeq)

class _PathRequestSeq(fastdds.LoanableCollection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _messagesWrapper.delete__PathRequestSeq

# Register _PathRequestSeq in _messagesWrapper:
_messagesWrapper._PathRequestSeq_swigregister(_PathRequestSeq)

class PathRequestSeq(_PathRequestSeq):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _messagesWrapper.delete_PathRequestSeq

    def __init__(self, *args):
        _messagesWrapper.PathRequestSeq_swiginit(self, _messagesWrapper.new_PathRequestSeq(*args))

    def __len__(self):
        return _messagesWrapper.PathRequestSeq___len__(self)

    def __getitem__(self, i):
        return _messagesWrapper.PathRequestSeq___getitem__(self, i)

# Register PathRequestSeq in _messagesWrapper:
_messagesWrapper.PathRequestSeq_swigregister(PathRequestSeq)

class _DestinationRequestSeq(fastdds.LoanableCollection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _messagesWrapper.delete__DestinationRequestSeq

# Register _DestinationRequestSeq in _messagesWrapper:
_messagesWrapper._DestinationRequestSeq_swigregister(_DestinationRequestSeq)

class DestinationRequestSeq(_DestinationRequestSeq):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _messagesWrapper.delete_DestinationRequestSeq

    def __init__(self, *args):
        _messagesWrapper.DestinationRequestSeq_swiginit(self, _messagesWrapper.new_DestinationRequestSeq(*args))

    def __len__(self):
        return _messagesWrapper.DestinationRequestSeq___len__(self)

    def __getitem__(self, i):
        return _messagesWrapper.DestinationRequestSeq___getitem__(self, i)

# Register DestinationRequestSeq in _messagesWrapper:
_messagesWrapper.DestinationRequestSeq_swigregister(DestinationRequestSeq)

class _OpenDrawerRequestSeq(fastdds.LoanableCollection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _messagesWrapper.delete__OpenDrawerRequestSeq

# Register _OpenDrawerRequestSeq in _messagesWrapper:
_messagesWrapper._OpenDrawerRequestSeq_swigregister(_OpenDrawerRequestSeq)

class OpenDrawerRequestSeq(_OpenDrawerRequestSeq):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _messagesWrapper.delete_OpenDrawerRequestSeq

    def __init__(self, *args):
        _messagesWrapper.OpenDrawerRequestSeq_swiginit(self, _messagesWrapper.new_OpenDrawerRequestSeq(*args))

    def __len__(self):
        return _messagesWrapper.OpenDrawerRequestSeq___len__(self)

    def __getitem__(self, i):
        return _messagesWrapper.OpenDrawerRequestSeq___getitem__(self, i)

# Register OpenDrawerRequestSeq in _messagesWrapper:
_messagesWrapper.OpenDrawerRequestSeq_swigregister(OpenDrawerRequestSeq)

class RobotMode(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _messagesWrapper.delete_RobotMode

    def __init__(self, *args):
        _messagesWrapper.RobotMode_swiginit(self, _messagesWrapper.new_RobotMode(*args))

    def __eq__(self, x):
        return _messagesWrapper.RobotMode___eq__(self, x)

    def __ne__(self, x):
        return _messagesWrapper.RobotMode___ne__(self, x)

    def mode(self, *args):
        return _messagesWrapper.RobotMode_mode(self, *args)

    @staticmethod
    def getMaxCdrSerializedSize(current_alignment=0):
        return _messagesWrapper.RobotMode_getMaxCdrSerializedSize(current_alignment)

    @staticmethod
    def getCdrSerializedSize(data, current_alignment=0):
        return _messagesWrapper.RobotMode_getCdrSerializedSize(data, current_alignment)

    def serialize(self, cdr):
        return _messagesWrapper.RobotMode_serialize(self, cdr)

    def deserialize(self, cdr):
        return _messagesWrapper.RobotMode_deserialize(self, cdr)

    @staticmethod
    def getKeyMaxCdrSerializedSize(current_alignment=0):
        return _messagesWrapper.RobotMode_getKeyMaxCdrSerializedSize(current_alignment)

    @staticmethod
    def isKeyDefined():
        return _messagesWrapper.RobotMode_isKeyDefined()

    def serializeKey(self, cdr):
        return _messagesWrapper.RobotMode_serializeKey(self, cdr)

# Register RobotMode in _messagesWrapper:
_messagesWrapper.RobotMode_swigregister(RobotMode)

def RobotMode_getMaxCdrSerializedSize(current_alignment=0):
    return _messagesWrapper.RobotMode_getMaxCdrSerializedSize(current_alignment)

def RobotMode_getCdrSerializedSize(data, current_alignment=0):
    return _messagesWrapper.RobotMode_getCdrSerializedSize(data, current_alignment)

def RobotMode_getKeyMaxCdrSerializedSize(current_alignment=0):
    return _messagesWrapper.RobotMode_getKeyMaxCdrSerializedSize(current_alignment)

def RobotMode_isKeyDefined():
    return _messagesWrapper.RobotMode_isKeyDefined()

class Poi(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _messagesWrapper.delete_Poi

    def __init__(self, *args):
        _messagesWrapper.Poi_swiginit(self, _messagesWrapper.new_Poi(*args))

    def __eq__(self, x):
        return _messagesWrapper.Poi___eq__(self, x)

    def __ne__(self, x):
        return _messagesWrapper.Poi___ne__(self, x)

    def sec(self, *args):
        return _messagesWrapper.Poi_sec(self, *args)

    def nanosec(self, *args):
        return _messagesWrapper.Poi_nanosec(self, *args)

    def x(self, *args):
        return _messagesWrapper.Poi_x(self, *args)

    def y(self, *args):
        return _messagesWrapper.Poi_y(self, *args)

    def yaw(self, *args):
        return _messagesWrapper.Poi_yaw(self, *args)

    def level_name(self, *args):
        return _messagesWrapper.Poi_level_name(self, *args)

    @staticmethod
    def getMaxCdrSerializedSize(current_alignment=0):
        return _messagesWrapper.Poi_getMaxCdrSerializedSize(current_alignment)

    @staticmethod
    def getCdrSerializedSize(data, current_alignment=0):
        return _messagesWrapper.Poi_getCdrSerializedSize(data, current_alignment)

    def serialize(self, cdr):
        return _messagesWrapper.Poi_serialize(self, cdr)

    def deserialize(self, cdr):
        return _messagesWrapper.Poi_deserialize(self, cdr)

    @staticmethod
    def getKeyMaxCdrSerializedSize(current_alignment=0):
        return _messagesWrapper.Poi_getKeyMaxCdrSerializedSize(current_alignment)

    @staticmethod
    def isKeyDefined():
        return _messagesWrapper.Poi_isKeyDefined()

    def serializeKey(self, cdr):
        return _messagesWrapper.Poi_serializeKey(self, cdr)

# Register Poi in _messagesWrapper:
_messagesWrapper.Poi_swigregister(Poi)

def Poi_getMaxCdrSerializedSize(current_alignment=0):
    return _messagesWrapper.Poi_getMaxCdrSerializedSize(current_alignment)

def Poi_getCdrSerializedSize(data, current_alignment=0):
    return _messagesWrapper.Poi_getCdrSerializedSize(data, current_alignment)

def Poi_getKeyMaxCdrSerializedSize(current_alignment=0):
    return _messagesWrapper.Poi_getKeyMaxCdrSerializedSize(current_alignment)

def Poi_isKeyDefined():
    return _messagesWrapper.Poi_isKeyDefined()

class RobotState(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _messagesWrapper.delete_RobotState

    def __init__(self, *args):
        _messagesWrapper.RobotState_swiginit(self, _messagesWrapper.new_RobotState(*args))

    def __eq__(self, x):
        return _messagesWrapper.RobotState___eq__(self, x)

    def __ne__(self, x):
        return _messagesWrapper.RobotState___ne__(self, x)

    def name(self, *args):
        return _messagesWrapper.RobotState_name(self, *args)

    def model(self, *args):
        return _messagesWrapper.RobotState_model(self, *args)

    def task_id(self, *args):
        return _messagesWrapper.RobotState_task_id(self, *args)

    def mode(self, *args):
        return _messagesWrapper.RobotState_mode(self, *args)

    def battery_percent(self, *args):
        return _messagesWrapper.RobotState_battery_percent(self, *args)

    def location(self, *args):
        return _messagesWrapper.RobotState_location(self, *args)

    def path(self, *args):
        return _messagesWrapper.RobotState_path(self, *args)

    @staticmethod
    def getMaxCdrSerializedSize(current_alignment=0):
        return _messagesWrapper.RobotState_getMaxCdrSerializedSize(current_alignment)

    @staticmethod
    def getCdrSerializedSize(data, current_alignment=0):
        return _messagesWrapper.RobotState_getCdrSerializedSize(data, current_alignment)

    def serialize(self, cdr):
        return _messagesWrapper.RobotState_serialize(self, cdr)

    def deserialize(self, cdr):
        return _messagesWrapper.RobotState_deserialize(self, cdr)

    @staticmethod
    def getKeyMaxCdrSerializedSize(current_alignment=0):
        return _messagesWrapper.RobotState_getKeyMaxCdrSerializedSize(current_alignment)

    @staticmethod
    def isKeyDefined():
        return _messagesWrapper.RobotState_isKeyDefined()

    def serializeKey(self, cdr):
        return _messagesWrapper.RobotState_serializeKey(self, cdr)

# Register RobotState in _messagesWrapper:
_messagesWrapper.RobotState_swigregister(RobotState)

def RobotState_getMaxCdrSerializedSize(current_alignment=0):
    return _messagesWrapper.RobotState_getMaxCdrSerializedSize(current_alignment)

def RobotState_getCdrSerializedSize(data, current_alignment=0):
    return _messagesWrapper.RobotState_getCdrSerializedSize(data, current_alignment)

def RobotState_getKeyMaxCdrSerializedSize(current_alignment=0):
    return _messagesWrapper.RobotState_getKeyMaxCdrSerializedSize(current_alignment)

def RobotState_isKeyDefined():
    return _messagesWrapper.RobotState_isKeyDefined()

class ModeParameter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _messagesWrapper.delete_ModeParameter

    def __init__(self, *args):
        _messagesWrapper.ModeParameter_swiginit(self, _messagesWrapper.new_ModeParameter(*args))

    def __eq__(self, x):
        return _messagesWrapper.ModeParameter___eq__(self, x)

    def __ne__(self, x):
        return _messagesWrapper.ModeParameter___ne__(self, x)

    def name(self, *args):
        return _messagesWrapper.ModeParameter_name(self, *args)

    def value(self, *args):
        return _messagesWrapper.ModeParameter_value(self, *args)

    @staticmethod
    def getMaxCdrSerializedSize(current_alignment=0):
        return _messagesWrapper.ModeParameter_getMaxCdrSerializedSize(current_alignment)

    @staticmethod
    def getCdrSerializedSize(data, current_alignment=0):
        return _messagesWrapper.ModeParameter_getCdrSerializedSize(data, current_alignment)

    def serialize(self, cdr):
        return _messagesWrapper.ModeParameter_serialize(self, cdr)

    def deserialize(self, cdr):
        return _messagesWrapper.ModeParameter_deserialize(self, cdr)

    @staticmethod
    def getKeyMaxCdrSerializedSize(current_alignment=0):
        return _messagesWrapper.ModeParameter_getKeyMaxCdrSerializedSize(current_alignment)

    @staticmethod
    def isKeyDefined():
        return _messagesWrapper.ModeParameter_isKeyDefined()

    def serializeKey(self, cdr):
        return _messagesWrapper.ModeParameter_serializeKey(self, cdr)

# Register ModeParameter in _messagesWrapper:
_messagesWrapper.ModeParameter_swigregister(ModeParameter)

def ModeParameter_getMaxCdrSerializedSize(current_alignment=0):
    return _messagesWrapper.ModeParameter_getMaxCdrSerializedSize(current_alignment)

def ModeParameter_getCdrSerializedSize(data, current_alignment=0):
    return _messagesWrapper.ModeParameter_getCdrSerializedSize(data, current_alignment)

def ModeParameter_getKeyMaxCdrSerializedSize(current_alignment=0):
    return _messagesWrapper.ModeParameter_getKeyMaxCdrSerializedSize(current_alignment)

def ModeParameter_isKeyDefined():
    return _messagesWrapper.ModeParameter_isKeyDefined()

class ModeRequest(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _messagesWrapper.delete_ModeRequest

    def __init__(self, *args):
        _messagesWrapper.ModeRequest_swiginit(self, _messagesWrapper.new_ModeRequest(*args))

    def __eq__(self, x):
        return _messagesWrapper.ModeRequest___eq__(self, x)

    def __ne__(self, x):
        return _messagesWrapper.ModeRequest___ne__(self, x)

    def fleet_name(self, *args):
        return _messagesWrapper.ModeRequest_fleet_name(self, *args)

    def robot_name(self, *args):
        return _messagesWrapper.ModeRequest_robot_name(self, *args)

    def mode(self, *args):
        return _messagesWrapper.ModeRequest_mode(self, *args)

    def task_id(self, *args):
        return _messagesWrapper.ModeRequest_task_id(self, *args)

    def parameters(self, *args):
        return _messagesWrapper.ModeRequest_parameters(self, *args)

    @staticmethod
    def getMaxCdrSerializedSize(current_alignment=0):
        return _messagesWrapper.ModeRequest_getMaxCdrSerializedSize(current_alignment)

    @staticmethod
    def getCdrSerializedSize(data, current_alignment=0):
        return _messagesWrapper.ModeRequest_getCdrSerializedSize(data, current_alignment)

    def serialize(self, cdr):
        return _messagesWrapper.ModeRequest_serialize(self, cdr)

    def deserialize(self, cdr):
        return _messagesWrapper.ModeRequest_deserialize(self, cdr)

    @staticmethod
    def getKeyMaxCdrSerializedSize(current_alignment=0):
        return _messagesWrapper.ModeRequest_getKeyMaxCdrSerializedSize(current_alignment)

    @staticmethod
    def isKeyDefined():
        return _messagesWrapper.ModeRequest_isKeyDefined()

    def serializeKey(self, cdr):
        return _messagesWrapper.ModeRequest_serializeKey(self, cdr)

# Register ModeRequest in _messagesWrapper:
_messagesWrapper.ModeRequest_swigregister(ModeRequest)

def ModeRequest_getMaxCdrSerializedSize(current_alignment=0):
    return _messagesWrapper.ModeRequest_getMaxCdrSerializedSize(current_alignment)

def ModeRequest_getCdrSerializedSize(data, current_alignment=0):
    return _messagesWrapper.ModeRequest_getCdrSerializedSize(data, current_alignment)

def ModeRequest_getKeyMaxCdrSerializedSize(current_alignment=0):
    return _messagesWrapper.ModeRequest_getKeyMaxCdrSerializedSize(current_alignment)

def ModeRequest_isKeyDefined():
    return _messagesWrapper.ModeRequest_isKeyDefined()

class PathRequest(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _messagesWrapper.delete_PathRequest

    def __init__(self, *args):
        _messagesWrapper.PathRequest_swiginit(self, _messagesWrapper.new_PathRequest(*args))

    def __eq__(self, x):
        return _messagesWrapper.PathRequest___eq__(self, x)

    def __ne__(self, x):
        return _messagesWrapper.PathRequest___ne__(self, x)

    def fleet_name(self, *args):
        return _messagesWrapper.PathRequest_fleet_name(self, *args)

    def robot_name(self, *args):
        return _messagesWrapper.PathRequest_robot_name(self, *args)

    def path(self, *args):
        return _messagesWrapper.PathRequest_path(self, *args)

    def task_id(self, *args):
        return _messagesWrapper.PathRequest_task_id(self, *args)

    @staticmethod
    def getMaxCdrSerializedSize(current_alignment=0):
        return _messagesWrapper.PathRequest_getMaxCdrSerializedSize(current_alignment)

    @staticmethod
    def getCdrSerializedSize(data, current_alignment=0):
        return _messagesWrapper.PathRequest_getCdrSerializedSize(data, current_alignment)

    def serialize(self, cdr):
        return _messagesWrapper.PathRequest_serialize(self, cdr)

    def deserialize(self, cdr):
        return _messagesWrapper.PathRequest_deserialize(self, cdr)

    @staticmethod
    def getKeyMaxCdrSerializedSize(current_alignment=0):
        return _messagesWrapper.PathRequest_getKeyMaxCdrSerializedSize(current_alignment)

    @staticmethod
    def isKeyDefined():
        return _messagesWrapper.PathRequest_isKeyDefined()

    def serializeKey(self, cdr):
        return _messagesWrapper.PathRequest_serializeKey(self, cdr)

# Register PathRequest in _messagesWrapper:
_messagesWrapper.PathRequest_swigregister(PathRequest)

def PathRequest_getMaxCdrSerializedSize(current_alignment=0):
    return _messagesWrapper.PathRequest_getMaxCdrSerializedSize(current_alignment)

def PathRequest_getCdrSerializedSize(data, current_alignment=0):
    return _messagesWrapper.PathRequest_getCdrSerializedSize(data, current_alignment)

def PathRequest_getKeyMaxCdrSerializedSize(current_alignment=0):
    return _messagesWrapper.PathRequest_getKeyMaxCdrSerializedSize(current_alignment)

def PathRequest_isKeyDefined():
    return _messagesWrapper.PathRequest_isKeyDefined()

class DestinationRequest(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _messagesWrapper.delete_DestinationRequest

    def __init__(self, *args):
        _messagesWrapper.DestinationRequest_swiginit(self, _messagesWrapper.new_DestinationRequest(*args))

    def __eq__(self, x):
        return _messagesWrapper.DestinationRequest___eq__(self, x)

    def __ne__(self, x):
        return _messagesWrapper.DestinationRequest___ne__(self, x)

    def fleet_name(self, *args):
        return _messagesWrapper.DestinationRequest_fleet_name(self, *args)

    def robot_name(self, *args):
        return _messagesWrapper.DestinationRequest_robot_name(self, *args)

    def destination(self, *args):
        return _messagesWrapper.DestinationRequest_destination(self, *args)

    def task_id(self, *args):
        return _messagesWrapper.DestinationRequest_task_id(self, *args)

    @staticmethod
    def getMaxCdrSerializedSize(current_alignment=0):
        return _messagesWrapper.DestinationRequest_getMaxCdrSerializedSize(current_alignment)

    @staticmethod
    def getCdrSerializedSize(data, current_alignment=0):
        return _messagesWrapper.DestinationRequest_getCdrSerializedSize(data, current_alignment)

    def serialize(self, cdr):
        return _messagesWrapper.DestinationRequest_serialize(self, cdr)

    def deserialize(self, cdr):
        return _messagesWrapper.DestinationRequest_deserialize(self, cdr)

    @staticmethod
    def getKeyMaxCdrSerializedSize(current_alignment=0):
        return _messagesWrapper.DestinationRequest_getKeyMaxCdrSerializedSize(current_alignment)

    @staticmethod
    def isKeyDefined():
        return _messagesWrapper.DestinationRequest_isKeyDefined()

    def serializeKey(self, cdr):
        return _messagesWrapper.DestinationRequest_serializeKey(self, cdr)

# Register DestinationRequest in _messagesWrapper:
_messagesWrapper.DestinationRequest_swigregister(DestinationRequest)

def DestinationRequest_getMaxCdrSerializedSize(current_alignment=0):
    return _messagesWrapper.DestinationRequest_getMaxCdrSerializedSize(current_alignment)

def DestinationRequest_getCdrSerializedSize(data, current_alignment=0):
    return _messagesWrapper.DestinationRequest_getCdrSerializedSize(data, current_alignment)

def DestinationRequest_getKeyMaxCdrSerializedSize(current_alignment=0):
    return _messagesWrapper.DestinationRequest_getKeyMaxCdrSerializedSize(current_alignment)

def DestinationRequest_isKeyDefined():
    return _messagesWrapper.DestinationRequest_isKeyDefined()

class OpenDrawerRequest(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _messagesWrapper.delete_OpenDrawerRequest

    def __init__(self, *args):
        _messagesWrapper.OpenDrawerRequest_swiginit(self, _messagesWrapper.new_OpenDrawerRequest(*args))

    def __eq__(self, x):
        return _messagesWrapper.OpenDrawerRequest___eq__(self, x)

    def __ne__(self, x):
        return _messagesWrapper.OpenDrawerRequest___ne__(self, x)

    def fleet_name(self, *args):
        return _messagesWrapper.OpenDrawerRequest_fleet_name(self, *args)

    def robot_name(self, *args):
        return _messagesWrapper.OpenDrawerRequest_robot_name(self, *args)

    def module_id(self, *args):
        return _messagesWrapper.OpenDrawerRequest_module_id(self, *args)

    def drawer_id(self, *args):
        return _messagesWrapper.OpenDrawerRequest_drawer_id(self, *args)

    def e_drawer(self, *args):
        return _messagesWrapper.OpenDrawerRequest_e_drawer(self, *args)

    @staticmethod
    def getMaxCdrSerializedSize(current_alignment=0):
        return _messagesWrapper.OpenDrawerRequest_getMaxCdrSerializedSize(current_alignment)

    @staticmethod
    def getCdrSerializedSize(data, current_alignment=0):
        return _messagesWrapper.OpenDrawerRequest_getCdrSerializedSize(data, current_alignment)

    def serialize(self, cdr):
        return _messagesWrapper.OpenDrawerRequest_serialize(self, cdr)

    def deserialize(self, cdr):
        return _messagesWrapper.OpenDrawerRequest_deserialize(self, cdr)

    @staticmethod
    def getKeyMaxCdrSerializedSize(current_alignment=0):
        return _messagesWrapper.OpenDrawerRequest_getKeyMaxCdrSerializedSize(current_alignment)

    @staticmethod
    def isKeyDefined():
        return _messagesWrapper.OpenDrawerRequest_isKeyDefined()

    def serializeKey(self, cdr):
        return _messagesWrapper.OpenDrawerRequest_serializeKey(self, cdr)

# Register OpenDrawerRequest in _messagesWrapper:
_messagesWrapper.OpenDrawerRequest_swigregister(OpenDrawerRequest)

def OpenDrawerRequest_getMaxCdrSerializedSize(current_alignment=0):
    return _messagesWrapper.OpenDrawerRequest_getMaxCdrSerializedSize(current_alignment)

def OpenDrawerRequest_getCdrSerializedSize(data, current_alignment=0):
    return _messagesWrapper.OpenDrawerRequest_getCdrSerializedSize(data, current_alignment)

def OpenDrawerRequest_getKeyMaxCdrSerializedSize(current_alignment=0):
    return _messagesWrapper.OpenDrawerRequest_getKeyMaxCdrSerializedSize(current_alignment)

def OpenDrawerRequest_isKeyDefined():
    return _messagesWrapper.OpenDrawerRequest_isKeyDefined()

GEN_API_VER = _messagesWrapper.GEN_API_VER
class RobotModePubSubType(fastdds.TopicDataType):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _messagesWrapper.RobotModePubSubType_swiginit(self, _messagesWrapper.new_RobotModePubSubType())
    __swig_destroy__ = _messagesWrapper.delete_RobotModePubSubType

    def serialize(self, data, payload):
        return _messagesWrapper.RobotModePubSubType_serialize(self, data, payload)

    def deserialize(self, payload, data):
        return _messagesWrapper.RobotModePubSubType_deserialize(self, payload, data)

    def getSerializedSizeProvider(self, data):
        return _messagesWrapper.RobotModePubSubType_getSerializedSizeProvider(self, data)

    def getKey(self, data, ihandle, force_md5=False):
        return _messagesWrapper.RobotModePubSubType_getKey(self, data, ihandle, force_md5)

    def createData(self):
        return _messagesWrapper.RobotModePubSubType_createData(self)

    def deleteData(self, data):
        return _messagesWrapper.RobotModePubSubType_deleteData(self, data)

    def is_bounded(self):
        return _messagesWrapper.RobotModePubSubType_is_bounded(self)

    def is_plain(self):
        return _messagesWrapper.RobotModePubSubType_is_plain(self)

    def construct_sample(self, memory):
        return _messagesWrapper.RobotModePubSubType_construct_sample(self, memory)
    m_md5 = property(_messagesWrapper.RobotModePubSubType_m_md5_get, _messagesWrapper.RobotModePubSubType_m_md5_set)
    m_keyBuffer = property(_messagesWrapper.RobotModePubSubType_m_keyBuffer_get, _messagesWrapper.RobotModePubSubType_m_keyBuffer_set)

# Register RobotModePubSubType in _messagesWrapper:
_messagesWrapper.RobotModePubSubType_swigregister(RobotModePubSubType)

class PoiPubSubType(fastdds.TopicDataType):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _messagesWrapper.PoiPubSubType_swiginit(self, _messagesWrapper.new_PoiPubSubType())
    __swig_destroy__ = _messagesWrapper.delete_PoiPubSubType

    def serialize(self, data, payload):
        return _messagesWrapper.PoiPubSubType_serialize(self, data, payload)

    def deserialize(self, payload, data):
        return _messagesWrapper.PoiPubSubType_deserialize(self, payload, data)

    def getSerializedSizeProvider(self, data):
        return _messagesWrapper.PoiPubSubType_getSerializedSizeProvider(self, data)

    def getKey(self, data, ihandle, force_md5=False):
        return _messagesWrapper.PoiPubSubType_getKey(self, data, ihandle, force_md5)

    def createData(self):
        return _messagesWrapper.PoiPubSubType_createData(self)

    def deleteData(self, data):
        return _messagesWrapper.PoiPubSubType_deleteData(self, data)

    def is_bounded(self):
        return _messagesWrapper.PoiPubSubType_is_bounded(self)

    def is_plain(self):
        return _messagesWrapper.PoiPubSubType_is_plain(self)

    def construct_sample(self, memory):
        return _messagesWrapper.PoiPubSubType_construct_sample(self, memory)
    m_md5 = property(_messagesWrapper.PoiPubSubType_m_md5_get, _messagesWrapper.PoiPubSubType_m_md5_set)
    m_keyBuffer = property(_messagesWrapper.PoiPubSubType_m_keyBuffer_get, _messagesWrapper.PoiPubSubType_m_keyBuffer_set)

# Register PoiPubSubType in _messagesWrapper:
_messagesWrapper.PoiPubSubType_swigregister(PoiPubSubType)

class RobotStatePubSubType(fastdds.TopicDataType):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _messagesWrapper.RobotStatePubSubType_swiginit(self, _messagesWrapper.new_RobotStatePubSubType())
    __swig_destroy__ = _messagesWrapper.delete_RobotStatePubSubType

    def serialize(self, data, payload):
        return _messagesWrapper.RobotStatePubSubType_serialize(self, data, payload)

    def deserialize(self, payload, data):
        return _messagesWrapper.RobotStatePubSubType_deserialize(self, payload, data)

    def getSerializedSizeProvider(self, data):
        return _messagesWrapper.RobotStatePubSubType_getSerializedSizeProvider(self, data)

    def getKey(self, data, ihandle, force_md5=False):
        return _messagesWrapper.RobotStatePubSubType_getKey(self, data, ihandle, force_md5)

    def createData(self):
        return _messagesWrapper.RobotStatePubSubType_createData(self)

    def deleteData(self, data):
        return _messagesWrapper.RobotStatePubSubType_deleteData(self, data)

    def is_bounded(self):
        return _messagesWrapper.RobotStatePubSubType_is_bounded(self)

    def is_plain(self):
        return _messagesWrapper.RobotStatePubSubType_is_plain(self)

    def construct_sample(self, memory):
        return _messagesWrapper.RobotStatePubSubType_construct_sample(self, memory)
    m_md5 = property(_messagesWrapper.RobotStatePubSubType_m_md5_get, _messagesWrapper.RobotStatePubSubType_m_md5_set)
    m_keyBuffer = property(_messagesWrapper.RobotStatePubSubType_m_keyBuffer_get, _messagesWrapper.RobotStatePubSubType_m_keyBuffer_set)

# Register RobotStatePubSubType in _messagesWrapper:
_messagesWrapper.RobotStatePubSubType_swigregister(RobotStatePubSubType)

class ModeParameterPubSubType(fastdds.TopicDataType):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _messagesWrapper.ModeParameterPubSubType_swiginit(self, _messagesWrapper.new_ModeParameterPubSubType())
    __swig_destroy__ = _messagesWrapper.delete_ModeParameterPubSubType

    def serialize(self, data, payload):
        return _messagesWrapper.ModeParameterPubSubType_serialize(self, data, payload)

    def deserialize(self, payload, data):
        return _messagesWrapper.ModeParameterPubSubType_deserialize(self, payload, data)

    def getSerializedSizeProvider(self, data):
        return _messagesWrapper.ModeParameterPubSubType_getSerializedSizeProvider(self, data)

    def getKey(self, data, ihandle, force_md5=False):
        return _messagesWrapper.ModeParameterPubSubType_getKey(self, data, ihandle, force_md5)

    def createData(self):
        return _messagesWrapper.ModeParameterPubSubType_createData(self)

    def deleteData(self, data):
        return _messagesWrapper.ModeParameterPubSubType_deleteData(self, data)

    def is_bounded(self):
        return _messagesWrapper.ModeParameterPubSubType_is_bounded(self)

    def is_plain(self):
        return _messagesWrapper.ModeParameterPubSubType_is_plain(self)

    def construct_sample(self, memory):
        return _messagesWrapper.ModeParameterPubSubType_construct_sample(self, memory)
    m_md5 = property(_messagesWrapper.ModeParameterPubSubType_m_md5_get, _messagesWrapper.ModeParameterPubSubType_m_md5_set)
    m_keyBuffer = property(_messagesWrapper.ModeParameterPubSubType_m_keyBuffer_get, _messagesWrapper.ModeParameterPubSubType_m_keyBuffer_set)

# Register ModeParameterPubSubType in _messagesWrapper:
_messagesWrapper.ModeParameterPubSubType_swigregister(ModeParameterPubSubType)

class ModeRequestPubSubType(fastdds.TopicDataType):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _messagesWrapper.ModeRequestPubSubType_swiginit(self, _messagesWrapper.new_ModeRequestPubSubType())
    __swig_destroy__ = _messagesWrapper.delete_ModeRequestPubSubType

    def serialize(self, data, payload):
        return _messagesWrapper.ModeRequestPubSubType_serialize(self, data, payload)

    def deserialize(self, payload, data):
        return _messagesWrapper.ModeRequestPubSubType_deserialize(self, payload, data)

    def getSerializedSizeProvider(self, data):
        return _messagesWrapper.ModeRequestPubSubType_getSerializedSizeProvider(self, data)

    def getKey(self, data, ihandle, force_md5=False):
        return _messagesWrapper.ModeRequestPubSubType_getKey(self, data, ihandle, force_md5)

    def createData(self):
        return _messagesWrapper.ModeRequestPubSubType_createData(self)

    def deleteData(self, data):
        return _messagesWrapper.ModeRequestPubSubType_deleteData(self, data)

    def is_bounded(self):
        return _messagesWrapper.ModeRequestPubSubType_is_bounded(self)

    def is_plain(self):
        return _messagesWrapper.ModeRequestPubSubType_is_plain(self)

    def construct_sample(self, memory):
        return _messagesWrapper.ModeRequestPubSubType_construct_sample(self, memory)
    m_md5 = property(_messagesWrapper.ModeRequestPubSubType_m_md5_get, _messagesWrapper.ModeRequestPubSubType_m_md5_set)
    m_keyBuffer = property(_messagesWrapper.ModeRequestPubSubType_m_keyBuffer_get, _messagesWrapper.ModeRequestPubSubType_m_keyBuffer_set)

# Register ModeRequestPubSubType in _messagesWrapper:
_messagesWrapper.ModeRequestPubSubType_swigregister(ModeRequestPubSubType)

class PathRequestPubSubType(fastdds.TopicDataType):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _messagesWrapper.PathRequestPubSubType_swiginit(self, _messagesWrapper.new_PathRequestPubSubType())
    __swig_destroy__ = _messagesWrapper.delete_PathRequestPubSubType

    def serialize(self, data, payload):
        return _messagesWrapper.PathRequestPubSubType_serialize(self, data, payload)

    def deserialize(self, payload, data):
        return _messagesWrapper.PathRequestPubSubType_deserialize(self, payload, data)

    def getSerializedSizeProvider(self, data):
        return _messagesWrapper.PathRequestPubSubType_getSerializedSizeProvider(self, data)

    def getKey(self, data, ihandle, force_md5=False):
        return _messagesWrapper.PathRequestPubSubType_getKey(self, data, ihandle, force_md5)

    def createData(self):
        return _messagesWrapper.PathRequestPubSubType_createData(self)

    def deleteData(self, data):
        return _messagesWrapper.PathRequestPubSubType_deleteData(self, data)

    def is_bounded(self):
        return _messagesWrapper.PathRequestPubSubType_is_bounded(self)

    def is_plain(self):
        return _messagesWrapper.PathRequestPubSubType_is_plain(self)

    def construct_sample(self, memory):
        return _messagesWrapper.PathRequestPubSubType_construct_sample(self, memory)
    m_md5 = property(_messagesWrapper.PathRequestPubSubType_m_md5_get, _messagesWrapper.PathRequestPubSubType_m_md5_set)
    m_keyBuffer = property(_messagesWrapper.PathRequestPubSubType_m_keyBuffer_get, _messagesWrapper.PathRequestPubSubType_m_keyBuffer_set)

# Register PathRequestPubSubType in _messagesWrapper:
_messagesWrapper.PathRequestPubSubType_swigregister(PathRequestPubSubType)

class DestinationRequestPubSubType(fastdds.TopicDataType):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _messagesWrapper.DestinationRequestPubSubType_swiginit(self, _messagesWrapper.new_DestinationRequestPubSubType())
    __swig_destroy__ = _messagesWrapper.delete_DestinationRequestPubSubType

    def serialize(self, data, payload):
        return _messagesWrapper.DestinationRequestPubSubType_serialize(self, data, payload)

    def deserialize(self, payload, data):
        return _messagesWrapper.DestinationRequestPubSubType_deserialize(self, payload, data)

    def getSerializedSizeProvider(self, data):
        return _messagesWrapper.DestinationRequestPubSubType_getSerializedSizeProvider(self, data)

    def getKey(self, data, ihandle, force_md5=False):
        return _messagesWrapper.DestinationRequestPubSubType_getKey(self, data, ihandle, force_md5)

    def createData(self):
        return _messagesWrapper.DestinationRequestPubSubType_createData(self)

    def deleteData(self, data):
        return _messagesWrapper.DestinationRequestPubSubType_deleteData(self, data)

    def is_bounded(self):
        return _messagesWrapper.DestinationRequestPubSubType_is_bounded(self)

    def is_plain(self):
        return _messagesWrapper.DestinationRequestPubSubType_is_plain(self)

    def construct_sample(self, memory):
        return _messagesWrapper.DestinationRequestPubSubType_construct_sample(self, memory)
    m_md5 = property(_messagesWrapper.DestinationRequestPubSubType_m_md5_get, _messagesWrapper.DestinationRequestPubSubType_m_md5_set)
    m_keyBuffer = property(_messagesWrapper.DestinationRequestPubSubType_m_keyBuffer_get, _messagesWrapper.DestinationRequestPubSubType_m_keyBuffer_set)

# Register DestinationRequestPubSubType in _messagesWrapper:
_messagesWrapper.DestinationRequestPubSubType_swigregister(DestinationRequestPubSubType)

class OpenDrawerRequestPubSubType(fastdds.TopicDataType):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _messagesWrapper.OpenDrawerRequestPubSubType_swiginit(self, _messagesWrapper.new_OpenDrawerRequestPubSubType())
    __swig_destroy__ = _messagesWrapper.delete_OpenDrawerRequestPubSubType

    def serialize(self, data, payload):
        return _messagesWrapper.OpenDrawerRequestPubSubType_serialize(self, data, payload)

    def deserialize(self, payload, data):
        return _messagesWrapper.OpenDrawerRequestPubSubType_deserialize(self, payload, data)

    def getSerializedSizeProvider(self, data):
        return _messagesWrapper.OpenDrawerRequestPubSubType_getSerializedSizeProvider(self, data)

    def getKey(self, data, ihandle, force_md5=False):
        return _messagesWrapper.OpenDrawerRequestPubSubType_getKey(self, data, ihandle, force_md5)

    def createData(self):
        return _messagesWrapper.OpenDrawerRequestPubSubType_createData(self)

    def deleteData(self, data):
        return _messagesWrapper.OpenDrawerRequestPubSubType_deleteData(self, data)

    def is_bounded(self):
        return _messagesWrapper.OpenDrawerRequestPubSubType_is_bounded(self)

    def is_plain(self):
        return _messagesWrapper.OpenDrawerRequestPubSubType_is_plain(self)

    def construct_sample(self, memory):
        return _messagesWrapper.OpenDrawerRequestPubSubType_construct_sample(self, memory)
    m_md5 = property(_messagesWrapper.OpenDrawerRequestPubSubType_m_md5_get, _messagesWrapper.OpenDrawerRequestPubSubType_m_md5_set)
    m_keyBuffer = property(_messagesWrapper.OpenDrawerRequestPubSubType_m_keyBuffer_get, _messagesWrapper.OpenDrawerRequestPubSubType_m_keyBuffer_set)

# Register OpenDrawerRequestPubSubType in _messagesWrapper:
_messagesWrapper.OpenDrawerRequestPubSubType_swigregister(OpenDrawerRequestPubSubType)



