#ifndef MOBILE_BASE_CONTROLLER__MOBILE_BASE_CONTROLLER_HPP_
#define MOBILE_BASE_CONTROLLER__MOBILE_BASE_CONTROLLER_HPP_

// system
#include <limits>
#include <memory>
#include <string>
#include <vector>

#include "controller_interface/chainable_controller_interface.hpp"
#include "geometry_msgs/msg/twist.hpp"
#include "geometry_msgs/msg/twist_stamped.hpp"
#include "realtime_tools/realtime_buffer.h"
#include "std_msgs/msg/float64_multi_array.hpp"
// auto-generated by generate_parameter_library
#include "mobile_base_controller/visibility_control.h"
#include "mobile_base_controller_parameters.hpp"

namespace mobile_base_controller
{
  using DataType = std_msgs::msg::Float64MultiArray;
  class MobileBaseController : public controller_interface::ChainableControllerInterface
  {
   public:
    MOBILE_BASE_CONTROLLER_PUBLIC
    controller_interface::CallbackReturn on_init() override;

    MOBILE_BASE_CONTROLLER_PUBLIC
    controller_interface::InterfaceConfiguration command_interface_configuration() const override;

    MOBILE_BASE_CONTROLLER_PUBLIC
    controller_interface::InterfaceConfiguration state_interface_configuration() const override;

    MOBILE_BASE_CONTROLLER_PUBLIC
    controller_interface::CallbackReturn on_configure(const rclcpp_lifecycle::State& previous_state) override;

    MOBILE_BASE_CONTROLLER_PUBLIC
    controller_interface::CallbackReturn on_activate(const rclcpp_lifecycle::State& previous_state) override;

    MOBILE_BASE_CONTROLLER_PUBLIC
    controller_interface::CallbackReturn on_deactivate(const rclcpp_lifecycle::State& previous_state) override;

    MOBILE_BASE_CONTROLLER_PUBLIC
    bool on_set_chained_mode(bool chained_mode) override;

    MOBILE_BASE_CONTROLLER_PUBLIC
    controller_interface::return_type update_and_write_commands(const rclcpp::Time& time,
                                                                const rclcpp::Duration& period) override;

   protected:
    std::vector<hardware_interface::CommandInterface> on_export_reference_interfaces() override;

#ifdef MOBILE_BASE_CONTROLLER__HUMBLE
    controller_interface::return_type update_reference_from_subscribers() override;
#endif

#ifdef MOBILE_BASE_CONTROLLER__IRON
    controller_interface::return_type update_reference_from_subscribers(const rclcpp::Time& time,
                                                                        const rclcpp::Duration& period) override;
#endif

    realtime_tools::RealtimeBuffer<std::shared_ptr<DataType>> rt_buffer_ptr_;

   private:
    bool _use_stamped_vel;

    size_t _dof;

    float _min_velocity;

    bool _zero_cmd_vel_published_last;

    std::shared_ptr<ParamListener> _param_listener;
    Params _params;

    std::vector<std::string> _reference_interface_names;

    std::vector<std::string> _command_interface_names;

    std::variant<rclcpp::Publisher<geometry_msgs::msg::Twist>::SharedPtr,
                 rclcpp::Publisher<geometry_msgs::msg::TwistStamped>::SharedPtr>
        _publisher_cmd_vel;

    std::variant<geometry_msgs::msg::Twist, geometry_msgs::msg::TwistStamped> compute_cmd_vel(
        const double hw_velocity_command);

    void publish_cmd_vel(const double hw_velocity_command);

    controller_interface::return_type update_reference_from_subscribers_impl();
  };
}   // namespace mobile_base_controller

#endif   // MOBILE_BASE_CONTROLLER__MOBILE_BASE_CONTROLLER_HPP_
