<?xml version="1.0"?>
<root main_tree_to_execute="MainTree">
    <!-- ////////// -->
    <BehaviorTree ID="GoalUpdateSubtree">
        <IfThenElse>
            <Condition ID="RobastGoalUpdated"/>
            <IfThenElse>
                <Condition ID="IsIncremented" variable_name="nav_state"/>
                <AlwaysFailure/>
                <SetBlackboard output_key="new_goal_pending" value="true"/>
            </IfThenElse>
            <AlwaysFailure/>
        </IfThenElse>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="MainTree">
        <SequenceStar>
            <SequenceStar>
                <Action ID="ImportYamlPosesAction" poses="{outer_door_bell_poses}" yaml_name="outer_door_bells.yaml"/>
                <Action ID="ImportYamlPosesAction" poses="{inner_door_bell_poses}" yaml_name="inner_door_bells.yaml"/>
                <SetBlackboard output_key="computed_outer_door_bell" value="false"/>
                <SetBlackboard output_key="computed_inner_door_bell" value="false"/>
                <SetBlackboard output_key="accomplished_outer_door_bell" value="false"/>
                <SetBlackboard output_key="accomplished_inner_door_bell" value="false"/>
                <SetBlackboard output_key="accomplished_final_goal" value="false"/>
                <SetBlackboard output_key="nav_state" value="0"/>
            </SequenceStar>
            <Control ID="RecoveryNode" name="NavigateRecovery" number_of_retries="6">
                <Control ID="PipelineSequence" name="NavigateWithReplanning">
                    <Decorator ID="RateController" hz="1.0">
                        <IfThenElse>
                            <ReactiveFallback>
                                <SubTree ID="GoalUpdateSubtree" __shared_blackboard="true"/>
                                <Condition ID="StateCheck" variable_name="new_goal_pending"/>
                                <ReactiveSequence>
                                    <IfThenElse>
                                        <Condition ID="StateCheck" variable_name="computed_outer_door_bell"/>
                                        <AlwaysFailure/>
                                        <Inverter>
                                            <Condition ID="StateCheck" variable_name="accomplished_outer_door_bell"/>
                                        </Inverter>
                                    </IfThenElse>
                                    <IfThenElse>
                                        <Condition ID="StateCheck" variable_name="computed_inner_door_bell"/>
                                        <AlwaysFailure/>
                                        <Inverter>
                                            <Condition ID="StateCheck" variable_name="accomplished_inner_door_bell"/>
                                        </Inverter>
                                    </IfThenElse>
                                </ReactiveSequence>
                            </ReactiveFallback>
                            <IfThenElse>
                                <Action ID="ComputePathToPose" goal="{goal}" path="{path_tmp}" planner_id="GridBased"/>
                                <Sequence>
                                    <IfThenElse>
                                        <Action ID="InterimGoalCompAction" interim_goal="{outer_door_bell_goal}" interim_poses="{outer_door_bell_poses}" is_path_reversed="false" path="{path_tmp}" search_radius="8.0" waypoint_index="{wp_id_outer_door_bell}"/>
                                        <Sequence>
                                            <SetBlackboard output_key="accomplished_outer_door_bell" value="false"/>
                                            <IfThenElse>
                                                <Decorator ID="RevertPath" path="{path_tmp}" reverted_path="{path_tmp_reverted}">
                                                    <Action ID="InterimGoalCompAction" interim_goal="{inner_door_bell_goal}" interim_poses="{inner_door_bell_poses}" is_path_reversed="true" path="{path_tmp_reverted}" search_radius="7.0" waypoint_index="{wp_id_inner_door_bell}"/>
                                                </Decorator>
                                                <Sequence>
                                                    <IfThenElse>
                                                        <Condition ID="CompareIntegerA&gt;BCondition" first_integer="wp_id_outer_door_bell" second_integer="wp_id_inner_door_bell"/>
                                                        <SetBlackboard output_key="accomplished_inner_door_bell" value="false"/>
                                                        <SetBlackboard output_key="accomplished_inner_door_bell" value="true"/>
                                                    </IfThenElse>
                                                </Sequence>
                                                <SetBlackboard output_key="accomplished_inner_door_bell" value="true"/>
                                            </IfThenElse>
                                        </Sequence>
                                        <Sequence>
                                            <SetBlackboard output_key="accomplished_outer_door_bell" value="true"/>
                                            <IfThenElse>
                                                <Decorator ID="RevertPath" path="{path_tmp}" reverted_path="{path_tmp_reverted}">
                                                    <Action ID="InterimGoalCompAction" interim_goal="{inner_door_bell_goal}" interim_poses="{inner_door_bell_poses}" is_path_reversed="true" path="{path_tmp_reverted}" search_radius="7.0" waypoint_index="{wp_id_inner_door_bell}"/>
                                                </Decorator>
                                                <Sequence>
                                                    <SetBlackboard output_key="computed_inner_door_bell" value="true"/>
                                                    <SetBlackboard output_key="accomplished_inner_door_bell" value="false"/>
                                                </Sequence>
                                                <SetBlackboard output_key="accomplished_inner_door_bell" value="true"/>
                                            </IfThenElse>
                                        </Sequence>
                                    </IfThenElse>
                                    <SetBlackboard output_key="computed_inner_door_bell" value="true"/>
                                    <SetBlackboard output_key="computed_outer_door_bell" value="true"/>
                                    <SetBlackboard output_key="accomplished_final_goal" value="false"/>
                                    <SetBlackboard output_key="new_goal_pending" value="false"/>
                                </Sequence>
                                <AlwaysFailure/>
                            </IfThenElse>
                            <AlwaysSuccess/>
                        </IfThenElse>
                    </Decorator>
                    <Decorator ID="RateController" hz="1.0">
                        <Control ID="RecoveryNode" name="ComputePathToPose" number_of_retries="1">
                            <IfThenElse>
                                <Condition ID="StateCheck" variable_name="accomplished_outer_door_bell"/>
                                <IfThenElse>
                                    <Condition ID="StateCheck" variable_name="accomplished_inner_door_bell"/>
                                    <Action ID="ComputePathToPose" goal="{goal}" path="{path}" planner_id="GridBased"/>
                                    <Action ID="ComputePathToPose" goal="{inner_door_bell_goal}" path="{path_inner_door_bell}" planner_id="GridBased"/>
                                </IfThenElse>
                                <IfThenElse>
                                    <Condition ID="StateCheck" variable_name="accomplished_inner_door_bell"/>
                                    <Action ID="ComputePathToPose" goal="{outer_door_bell_goal}" path="{path_outer_door_bell}" planner_id="GridBased"/>
                                    <Action ID="ComputePathToPose" goal="{inner_door_bell_goal}" path="{path_inner_door_bell}" planner_id="GridBased"/>
                                </IfThenElse>
                            </IfThenElse>
                            <ReactiveFallback name="ComputePathToPoseRecoveryFallback">
                                <SubTree ID="GoalUpdateSubtree" __shared_blackboard="true"/>
                                <Action ID="ClearEntireCostmap" name="ClearGlobalCostmap-Context" service_name="global_costmap/clear_entirely_global_costmap"/>
                            </ReactiveFallback>
                        </Control>
                    </Decorator>
                    <Control ID="RecoveryNode" name="FollowPath" number_of_retries="2">
                        <WhileDoElse>
                            <Condition ID="StateCheck" variable_name="new_goal_pending"/>
                            <AlwaysFailure/>
                            <IfThenElse>
                                <Condition ID="StateCheck" variable_name="accomplished_inner_door_bell"/>
                                <IfThenElse>
                                    <Condition ID="StateCheck" variable_name="accomplished_outer_door_bell"/>
                                    <Sequence>
                                        <Action ID="FollowPath" controller_id="FollowPath" path="{path}"/>
                                        <SetBlackboard output_key="nav_state" value="0"/>
                                        <SetBlackboard output_key="accomplished_final_goal" value="true"/>
                                    </Sequence>
                                    <Sequence>
                                        <ReactiveFallback>
                                            <Condition ID="StateCheck" variable_name="accomplished_outer_door_bell"/>
                                            <Action ID="FollowPath" controller_id="FollowPath" path="{path_outer_door_bell}"/>
                                        </ReactiveFallback>
                                        <SetBlackboard output_key="accomplished_outer_door_bell" value="true"/>
                                        <SetBlackboard output_key="nav_state" value="2"/>
                                        <Action ID="Wait" wait_duration="1.5"/>
                                    </Sequence>
                                </IfThenElse>
                                <Sequence>
                                    <ReactiveFallback>
                                        <Condition ID="StateCheck" variable_name="accomplished_inner_door_bell"/>
                                        <Action ID="FollowPath" controller_id="FollowPath" path="{path_inner_door_bell}"/>
                                    </ReactiveFallback>
                                    <SetBlackboard output_key="accomplished_inner_door_bell" value="true"/>
                                    <SetBlackboard output_key="nav_state" value="1"/>
                                    <Action ID="Wait" wait_duration="1.5"/>
                                </Sequence>
                            </IfThenElse>
                        </WhileDoElse>
                        <ReactiveFallback name="FollowPathRecoveryFallback">
                            <SubTree ID="GoalUpdateSubtree" __shared_blackboard="true"/>
                            <Action ID="ClearEntireCostmap" name="ClearLocalCostmap-Context" service_name="local_costmap/clear_entirely_local_costmap"/>
                        </ReactiveFallback>
                    </Control>
                    <Decorator ID="RateController" hz="5">
                        <Inverter>
                            <KeepRunningUntilFailure>
                                <Inverter>
                                    <ReactiveSequence>
                                        <Condition ID="StateCheck" variable_name="accomplished_outer_door_bell"/>
                                        <Condition ID="StateCheck" variable_name="accomplished_inner_door_bell"/>
                                        <Condition ID="StateCheck" variable_name="accomplished_final_goal"/>
                                    </ReactiveSequence>
                                </Inverter>
                            </KeepRunningUntilFailure>
                        </Inverter>
                    </Decorator>
                </Control>
                <ReactiveFallback name="RecoveryFallback">
                    <SubTree ID="GoalUpdateSubtree" __shared_blackboard="true"/>
                    <Control ID="RoundRobin" name="RecoveryActions">
                        <Sequence name="ClearingActions">
                            <Action ID="ClearEntireCostmap" name="ClearLocalCostmap-Subtree" service_name="local_costmap/clear_entirely_local_costmap"/>
                            <Action ID="ClearEntireCostmap" name="ClearGlobalCostmap-Subtree" service_name="global_costmap/clear_entirely_global_costmap"/>
                        </Sequence>
                        <Action ID="Spin" spin_dist="1.57"/>
                        <Action ID="Wait" wait_duration="5"/>
                    </Control>
                </ReactiveFallback>
            </Control>
        </SequenceStar>
    </BehaviorTree>
    <!-- ////////// -->
    <TreeNodesModel>
        <Action ID="BackUp">
            <input_port name="backup_dist">Distance to backup</input_port>
            <input_port name="backup_speed">Speed at which to backup</input_port>
        </Action>
        <Action ID="ClearEntireCostmap">
            <input_port name="server_timeout" type="std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt;"/>
            <input_port name="service_name" type="std::string">please_set_service_name_in_BT_Node</input_port>
        </Action>
        <Condition ID="CompareIntegerA&gt;BCondition">
            <input_port name="first_integer" type="int">BT-Key for the first integer that is compared to the second one</input_port>
            <input_port name="second_integer" type="int">BT-Key for the second integer that is compared to the first one</input_port>
        </Condition>
        <Action ID="ComputePathToPose">
            <input_port name="goal" type="geometry_msgs::msg::PoseStamped_&lt;std::allocator&lt;void&gt; &gt;">Destination to plan to</input_port>
            <output_port name="path" type="nav_msgs::msg::Path_&lt;std::allocator&lt;void&gt; &gt;">Path created by ComputePathToPose node</output_port>
            <input_port name="planner_id" type="std::string"/>
            <input_port name="server_name" type="std::string">Action server name</input_port>
            <input_port name="server_timeout" type="std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt;"/>
        </Action>
        <Decorator ID="DistanceController">
            <input_port name="distance">Distance</input_port>
        </Decorator>
        <Action ID="FollowPath">
            <input_port name="controller_id" type="std::string"/>
            <input_port name="path" type="nav_msgs::msg::Path_&lt;std::allocator&lt;void&gt; &gt;">Path to follow</input_port>
            <input_port name="server_name" type="std::string">Action server name</input_port>
            <input_port name="server_timeout" type="std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt;"/>
        </Action>
        <Condition ID="GoalReached">
            <input_port name="goal">Destination</input_port>
        </Condition>
        <SubTree ID="GoalUpdateSubtree">
            <inout_port name="__shared_blackboard"/>
        </SubTree>
        <Condition ID="GoalUpdated"/>
        <Decorator ID="GoalUpdater">
            <input_port name="input_goal">Original goal in</input_port>
            <output_port name="output_goal">Output goal set by subscription</output_port>
        </Decorator>
        <Action ID="ImportYamlPosesAction">
            <output_port name="poses" type="std::vector&lt;geometry_msgs::msg::PoseStamped_&lt;std::allocator&lt;void&gt; &gt;, std::allocator&lt;geometry_msgs::msg::PoseStamped_&lt;std::allocator&lt;void&gt; &gt; &gt; &gt;">poses loaded of the yaml</output_port>
            <input_port name="server_name" type="std::string">Action server name</input_port>
            <input_port name="server_timeout" type="std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt;"/>
            <input_port name="yaml_name" type="std::string">name of the yaml containing poses</input_port>
        </Action>
        <Action ID="InterimGoalCompAction">
            <output_port name="interim_goal" type="geometry_msgs::msg::PoseStamped_&lt;std::allocator&lt;void&gt; &gt;">Interim goal selected by the interim_goal_selector node</output_port>
            <input_port name="interim_poses" type="std::vector&lt;geometry_msgs::msg::PoseStamped_&lt;std::allocator&lt;void&gt; &gt;, std::allocator&lt;geometry_msgs::msg::PoseStamped_&lt;std::allocator&lt;void&gt; &gt; &gt; &gt;">Interim poses list</input_port>
            <input_port name="is_path_reversed" type="bool">Is the supplied path reversed?</input_port>
            <input_port name="path" type="nav_msgs::msg::Path_&lt;std::allocator&lt;void&gt; &gt;">Path to Goal</input_port>
            <input_port name="search_radius" type="double">Radius to search for interim_poses</input_port>
            <input_port name="server_name" type="std::string">Action server name</input_port>
            <input_port name="server_timeout" type="std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt;"/>
            <output_port name="waypoint_index" type="int">Waypoint index of the path-waypoints that was closest to the chosen interim pose</output_port>
        </Action>
        <Condition ID="IsIncremented">
            <input_port name="variable_name" type="std::string">name of the variable on the blackboard</input_port>
        </Condition>
        <Condition ID="IsStuck"/>
        <Action ID="NavigateToPose">
            <input_port name="orientation">Orientation</input_port>
            <input_port name="position">Position</input_port>
        </Action>
        <Control ID="PipelineSequence"/>
        <Action ID="RandomCrawl"/>
        <Decorator ID="RateController">
            <input_port name="hz" type="double">Rate</input_port>
        </Decorator>
        <Control ID="RecoveryNode">
            <input_port name="number_of_retries" type="int">Number of retries</input_port>
        </Control>
        <Decorator ID="RevertPath">
            <input_port name="path" type="nav_msgs::msg::Path_&lt;std::allocator&lt;void&gt; &gt;">Path to be reverted</input_port>
            <output_port name="reverted_path" type="nav_msgs::msg::Path_&lt;std::allocator&lt;void&gt; &gt;">reverted path</output_port>
        </Decorator>
        <Condition ID="RobastGoalUpdated"/>
        <Control ID="RoundRobin"/>
        <Decorator ID="SpeedController">
            <input_port name="filter_duration">Duration (secs) for velocity smoothing filter</input_port>
            <input_port name="max_rate">Maximum rate</input_port>
            <input_port name="max_speed">Maximum speed</input_port>
            <input_port name="min_rate">Minimum rate</input_port>
            <input_port name="min_speed">Minimum speed</input_port>
        </Decorator>
        <Action ID="Spin">
            <input_port name="server_name" type="std::string">Action server name</input_port>
            <input_port name="server_timeout" type="std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt;"/>
            <input_port name="spin_dist" type="double">Spin distance</input_port>
        </Action>
        <Condition ID="StateCheck">
            <input_port name="variable_name" type="std::string">name of the variable (bool) on the blackboard</input_port>
        </Condition>
        <Condition ID="TransformAvailable">
            <input_port name="child">Child frame for transform</input_port>
            <input_port name="parent">Parent frame for transform</input_port>
        </Condition>
        <Condition ID="VariableUpdated">
            <input_port name="variable_name">name of the int in the Blackboard that should be checked</input_port>
        </Condition>
        <Action ID="Wait">
            <input_port name="server_name" type="std::string">Action server name</input_port>
            <input_port name="server_timeout" type="std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt;"/>
            <input_port name="wait_duration" type="int">Wait time</input_port>
        </Action>
    </TreeNodesModel>
    <!-- ////////// -->
</root>

